{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.0","compilation":{"directory":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1","program":"/home/oleg/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","flatbuffers","/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-Cembed-bitcode=no","-C","debuginfo=2","-C","metadata=a2599fd43c311cc8","-C","extra-filename=-a2599fd43c311cc8","--out-dir","/home/oleg/git/RustHackableGame/Client/target/rls/debug/deps","-L","dependency=/home/oleg/git/RustHackableGame/Client/target/rls/debug/deps","--extern","smallvec=/home/oleg/git/RustHackableGame/Client/target/rls/debug/deps/libsmallvec-f88c8b0d4c815cdf.rmeta","--cap-lints","allow","--error-format=json","--sysroot","/home/oleg/.rustup/toolchains/stable-x86_64-unknown-linux-gnu"],"output":"/home/oleg/git/RustHackableGame/Client/target/rls/debug/deps/libflatbuffers-a2599fd43c311cc8.rmeta"},"prelude":{"crate_id":{"name":"flatbuffers","disambiguator":[8281238914834058189,3300282225927508969]},"crate_root":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src","external_crates":[{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[13842155912677385872,11660590378338683385]}},{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/lib.rs","num":2,"id":{"name":"core","disambiguator":[1145230128757463294,15976268636418953592]}},{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[10006185802367012891,4937926339965588888]}},{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[18134491841186215314,8619879253945163470]}},{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[4357087487764653857,7816708319091665300]}},{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[10862771416828768076,14090399182622295334]}},{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[7832813774001485751,4465207999706185911]}},{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[14203079308812153325,7069038021421518271]}},{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/lib.rs","num":9,"id":{"name":"backtrace","disambiguator":[17468104730350570711,1510909898039763528]}},{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/lib.rs","num":10,"id":{"name":"rustc_demangle","disambiguator":[11081656445949358564,12304596919514716713]}},{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/lib.rs","num":11,"id":{"name":"backtrace_sys","disambiguator":[4496289705150708668,14963538919535077439]}},{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/lib.rs","num":12,"id":{"name":"hashbrown","disambiguator":[12585038344938944291,11081610577875308163]}},{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/lib.rs","num":13,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[4866546307375520792,3681606541934731072]}},{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/lib.rs","num":14,"id":{"name":"panic_unwind","disambiguator":[6903286030758146719,12939842262273902871]}},{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/builder.rs","num":15,"id":{"name":"smallvec","disambiguator":[12608478744475708106,3766846628186766578]}}],"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/lib.rs","byte_start":617,"byte_end":1919,"line_start":17,"line_end":50,"column_start":1,"column_end":45}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":485},"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/lib.rs","byte_start":1512,"byte_end":1529,"line_start":41,"line_end":41,"column_start":18,"column_end":35},"alias_span":null,"name":"FlatBufferBuilder","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":105},"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/lib.rs","byte_start":1560,"byte_end":1573,"line_start":43,"line_end":43,"column_start":5,"column_end":18},"alias_span":null,"name":"byte_swap_f32","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":106},"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/lib.rs","byte_start":1575,"byte_end":1588,"line_start":43,"line_end":43,"column_start":20,"column_end":33},"alias_span":null,"name":"byte_swap_f64","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":107},"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/lib.rs","byte_start":1590,"byte_end":1604,"line_start":43,"line_end":43,"column_start":35,"column_end":49},"alias_span":null,"name":"emplace_scalar","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":111},"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/lib.rs","byte_start":1606,"byte_end":1617,"line_start":43,"line_end":43,"column_start":51,"column_end":62},"alias_span":null,"name":"read_scalar","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":109},"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/lib.rs","byte_start":1619,"byte_end":1633,"line_start":43,"line_end":43,"column_start":64,"column_end":78},"alias_span":null,"name":"read_scalar_at","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":94},"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/lib.rs","byte_start":1635,"byte_end":1647,"line_start":43,"line_end":43,"column_start":80,"column_end":92},"alias_span":null,"name":"EndianScalar","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":115},"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/lib.rs","byte_start":1669,"byte_end":1675,"line_start":45,"line_end":45,"column_start":18,"column_end":24},"alias_span":null,"name":"Follow","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":539},"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/lib.rs","byte_start":1677,"byte_end":1688,"line_start":45,"line_end":45,"column_start":26,"column_end":37},"alias_span":null,"name":"FollowStart","value":"","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/lib.rs","byte_start":1711,"byte_end":1712,"line_start":46,"line_end":46,"column_start":21,"column_end":22},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":269},"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/lib.rs","byte_start":1728,"byte_end":1732,"line_start":47,"line_end":47,"column_start":15,"column_end":19},"alias_span":null,"name":"Push","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":302},"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/lib.rs","byte_start":1750,"byte_end":1771,"line_start":48,"line_end":48,"column_start":17,"column_end":38},"alias_span":null,"name":"buffer_has_identifier","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":296},"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/lib.rs","byte_start":1773,"byte_end":1781,"line_start":48,"line_end":48,"column_start":40,"column_end":48},"alias_span":null,"name":"get_root","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":299},"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/lib.rs","byte_start":1783,"byte_end":1805,"line_start":48,"line_end":48,"column_start":50,"column_end":72},"alias_span":null,"name":"get_size_prefixed_root","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":667},"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/lib.rs","byte_start":1807,"byte_end":1812,"line_start":48,"line_end":48,"column_start":74,"column_end":79},"alias_span":null,"name":"Table","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":352},"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/lib.rs","byte_start":1832,"byte_end":1847,"line_start":49,"line_end":49,"column_start":18,"column_end":33},"alias_span":null,"name":"follow_cast_ref","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":334},"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/lib.rs","byte_start":1849,"byte_end":1864,"line_start":49,"line_end":49,"column_start":35,"column_end":50},"alias_span":null,"name":"SafeSliceAccess","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":685},"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/lib.rs","byte_start":1866,"byte_end":1872,"line_start":49,"line_end":49,"column_start":52,"column_end":58},"alias_span":null,"name":"Vector","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":427},"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/lib.rs","byte_start":1891,"byte_end":1918,"line_start":50,"line_end":50,"column_start":17,"column_end":44},"alias_span":null,"name":"field_index_to_field_offset","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/lib.rs","byte_start":617,"byte_end":1919,"line_start":17,"line_end":50,"column_start":1,"column_end":45},"name":"","qualname":"::","value":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":92},{"krate":0,"index":113},{"krate":0,"index":132},{"krate":0,"index":263},{"krate":0,"index":282},{"krate":0,"index":303},{"krate":0,"index":411},{"krate":0,"index":433},{"krate":0,"index":447},{"krate":0,"index":448},{"krate":0,"index":455},{"krate":0,"index":458},{"krate":0,"index":459},{"krate":0,"index":460},{"krate":0,"index":465},{"krate":0,"index":469}],"decl_id":null,"docs":" # FlatBuffers","sig":null,"attributes":[{"value":"! # FlatBuffers","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/lib.rs","byte_start":617,"byte_end":634,"line_start":17,"line_end":17,"column_start":1,"column_end":18}},{"value":"!","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/lib.rs","byte_start":635,"byte_end":638,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"! A library for memory-efficient serialization of data.","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/lib.rs","byte_start":639,"byte_end":696,"line_start":19,"line_end":19,"column_start":1,"column_end":58}},{"value":"!","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/lib.rs","byte_start":697,"byte_end":700,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"! This crate provides runtime support for the FlatBuffers format in the Rust programming language.","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/lib.rs","byte_start":701,"byte_end":801,"line_start":21,"line_end":21,"column_start":1,"column_end":101}},{"value":"! To use this crate, first generate code with the `flatc` compiler, as described here: https://google.github.io/flatbuffers/","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/lib.rs","byte_start":802,"byte_end":928,"line_start":22,"line_end":22,"column_start":1,"column_end":127}},{"value":"! Then, include that code into your project.","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/lib.rs","byte_start":929,"byte_end":975,"line_start":23,"line_end":23,"column_start":1,"column_end":47}},{"value":"! Finally, add this crate to your `Cargo.toml`.","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/lib.rs","byte_start":976,"byte_end":1025,"line_start":24,"line_end":24,"column_start":1,"column_end":50}},{"value":"!","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/lib.rs","byte_start":1026,"byte_end":1029,"line_start":25,"line_end":25,"column_start":1,"column_end":4}},{"value":"! At this time, Rust support is experimental, and APIs may change between minor versions.","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/lib.rs","byte_start":1030,"byte_end":1121,"line_start":26,"line_end":26,"column_start":1,"column_end":92}},{"value":"!","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/lib.rs","byte_start":1122,"byte_end":1125,"line_start":27,"line_end":27,"column_start":1,"column_end":4}},{"value":"! At this time, to generate Rust code, you will need the latest `master` version of `flatc`, available from here: https://github.com/google/flatbuffers","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/lib.rs","byte_start":1126,"byte_end":1279,"line_start":28,"line_end":28,"column_start":1,"column_end":154}},{"value":"! (On OSX, you can install FlatBuffers from `HEAD` with the Homebrew package manager.)","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/lib.rs","byte_start":1280,"byte_end":1368,"line_start":29,"line_end":29,"column_start":1,"column_end":89}}]},{"kind":"Struct","id":{"krate":0,"index":485},"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/builder.rs","byte_start":3528,"byte_end":3545,"line_start":44,"line_end":44,"column_start":12,"column_end":29},"name":"FlatBufferBuilder","qualname":"::builder::FlatBufferBuilder","value":"FlatBufferBuilder {  }","parent":null,"children":[{"krate":0,"index":487},{"krate":0,"index":488},{"krate":0,"index":489},{"krate":0,"index":490},{"krate":0,"index":491},{"krate":0,"index":492},{"krate":0,"index":493},{"krate":0,"index":494}],"decl_id":null,"docs":" FlatBufferBuilder builds a FlatBuffer through manipulating its internal\n state. It has an owned `Vec<u8>` that grows as needed (up to the hardcoded\n limit of 2GiB, which is set by the FlatBuffers format).\n","sig":null,"attributes":[{"value":"/ FlatBufferBuilder builds a FlatBuffer through manipulating its internal","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/builder.rs","byte_start":3263,"byte_end":3338,"line_start":40,"line_end":40,"column_start":1,"column_end":76}},{"value":"/ state. It has an owned `Vec<u8>` that grows as needed (up to the hardcoded","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/builder.rs","byte_start":3339,"byte_end":3417,"line_start":41,"line_end":41,"column_start":1,"column_end":79}},{"value":"/ limit of 2GiB, which is set by the FlatBuffers format).","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/builder.rs","byte_start":3418,"byte_end":3477,"line_start":42,"line_end":42,"column_start":1,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":27},"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/builder.rs","byte_start":3882,"byte_end":3885,"line_start":61,"line_end":61,"column_start":12,"column_end":15},"name":"new","qualname":"<FlatBufferBuilder>::new","value":"fn () -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a FlatBufferBuilder that is ready for writing.\n","sig":null,"attributes":[{"value":"/ Create a FlatBufferBuilder that is ready for writing.","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/builder.rs","byte_start":3813,"byte_end":3870,"line_start":60,"line_end":60,"column_start":5,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":28},"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/builder.rs","byte_start":4146,"byte_end":4163,"line_start":69,"line_end":69,"column_start":12,"column_end":29},"name":"new_with_capacity","qualname":"<FlatBufferBuilder>::new_with_capacity","value":"fn (size: usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a FlatBufferBuilder that is ready for writing, with a\n ready-to-use capacity of the provided size.","sig":null,"attributes":[{"value":"/ Create a FlatBufferBuilder that is ready for writing, with a","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/builder.rs","byte_start":3944,"byte_end":4008,"line_start":65,"line_end":65,"column_start":5,"column_end":69}},{"value":"/ ready-to-use capacity of the provided size.","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/builder.rs","byte_start":4013,"byte_end":4060,"line_start":66,"line_end":66,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/builder.rs","byte_start":4065,"byte_end":4068,"line_start":67,"line_end":67,"column_start":5,"column_end":8}},{"value":"/ The maximum valid value is `FLATBUFFERS_MAX_BUFFER_SIZE`.","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/builder.rs","byte_start":4073,"byte_end":4134,"line_start":68,"line_end":68,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":29},"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/builder.rs","byte_start":5392,"byte_end":5397,"line_start":104,"line_end":104,"column_start":12,"column_end":17},"name":"reset","qualname":"<FlatBufferBuilder>::reset","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Reset the FlatBufferBuilder internal state. Use this method after a\n call to a `finish` function in order to re-use a FlatBufferBuilder.","sig":null,"attributes":[{"value":"/ Reset the FlatBufferBuilder internal state. Use this method after a","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/builder.rs","byte_start":4796,"byte_end":4867,"line_start":93,"line_end":93,"column_start":5,"column_end":76}},{"value":"/ call to a `finish` function in order to re-use a FlatBufferBuilder.","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/builder.rs","byte_start":4872,"byte_end":4943,"line_start":94,"line_end":94,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/builder.rs","byte_start":4948,"byte_end":4951,"line_start":95,"line_end":95,"column_start":5,"column_end":8}},{"value":"/ This function is the only way to reset the `finished` state and start","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/builder.rs","byte_start":4956,"byte_end":5029,"line_start":96,"line_end":96,"column_start":5,"column_end":78}},{"value":"/ again.","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/builder.rs","byte_start":5034,"byte_end":5044,"line_start":97,"line_end":97,"column_start":5,"column_end":15}},{"value":"/","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/builder.rs","byte_start":5049,"byte_end":5052,"line_start":98,"line_end":98,"column_start":5,"column_end":8}},{"value":"/ If you are using a FlatBufferBuilder repeatedly, make sure to use this","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/builder.rs","byte_start":5057,"byte_end":5131,"line_start":99,"line_end":99,"column_start":5,"column_end":79}},{"value":"/ function, because it re-uses the FlatBufferBuilder's existing","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/builder.rs","byte_start":5136,"byte_end":5201,"line_start":100,"line_end":100,"column_start":5,"column_end":70}},{"value":"/ heap-allocated `Vec<u8>` internal buffer. This offers significant speed","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/builder.rs","byte_start":5206,"byte_end":5281,"line_start":101,"line_end":101,"column_start":5,"column_end":80}},{"value":"/ improvements as compared to creating a new FlatBufferBuilder for every","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/builder.rs","byte_start":5286,"byte_end":5360,"line_start":102,"line_end":102,"column_start":5,"column_end":79}},{"value":"/ new object.","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/builder.rs","byte_start":5365,"byte_end":5380,"line_start":103,"line_end":103,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":30},"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/builder.rs","byte_start":6052,"byte_end":6060,"line_start":125,"line_end":125,"column_start":12,"column_end":20},"name":"collapse","qualname":"<FlatBufferBuilder>::collapse","value":"fn (self) -> (Vec<u8>, usize)","parent":null,"children":[],"decl_id":null,"docs":" Destroy the FlatBufferBuilder, returning its internal byte vector\n and the index into it that represents the start of valid data.\n","sig":null,"attributes":[{"value":"/ Destroy the FlatBufferBuilder, returning its internal byte vector","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/builder.rs","byte_start":5900,"byte_end":5969,"line_start":123,"line_end":123,"column_start":5,"column_end":74}},{"value":"/ and the index into it that represents the start of valid data.","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/builder.rs","byte_start":5974,"byte_end":6040,"line_start":124,"line_end":124,"column_start":5,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":31},"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/builder.rs","byte_start":6357,"byte_end":6361,"line_start":134,"line_end":134,"column_start":12,"column_end":16},"name":"push","qualname":"<FlatBufferBuilder>::push","value":"fn <P> (&mut self, x: P) -> WIPOffset<P::Output>","parent":null,"children":[],"decl_id":null,"docs":" Push a Push'able value onto the front of the in-progress data.","sig":null,"attributes":[{"value":"/ Push a Push'able value onto the front of the in-progress data.","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/builder.rs","byte_start":6136,"byte_end":6202,"line_start":129,"line_end":129,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/builder.rs","byte_start":6207,"byte_end":6210,"line_start":130,"line_end":130,"column_start":5,"column_end":8}},{"value":"/ This function uses traits to provide a unified API for writing","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/builder.rs","byte_start":6215,"byte_end":6281,"line_start":131,"line_end":131,"column_start":5,"column_end":71}},{"value":"/ scalars, tables, vectors, and WIPOffsets.","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/builder.rs","byte_start":6286,"byte_end":6331,"line_start":132,"line_end":132,"column_start":5,"column_end":50}},{"value":"inline","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/builder.rs","byte_start":6336,"byte_end":6345,"line_start":133,"line_end":133,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":33},"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/builder.rs","byte_start":6929,"byte_end":6938,"line_start":149,"line_end":149,"column_start":12,"column_end":21},"name":"push_slot","qualname":"<FlatBufferBuilder>::push_slot","value":"fn <X> (&mut self, slotoff: VOffsetT, x: X, default: X) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Push a Push'able value onto the front of the in-progress data, and\n store a reference to it in the in-progress vtable. If the value matches\n the default, then this is a no-op.\n","sig":null,"attributes":[{"value":"/ Push a Push'able value onto the front of the in-progress data, and","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/builder.rs","byte_start":6710,"byte_end":6780,"line_start":145,"line_end":145,"column_start":5,"column_end":75}},{"value":"/ store a reference to it in the in-progress vtable. If the value matches","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/builder.rs","byte_start":6785,"byte_end":6860,"line_start":146,"line_end":146,"column_start":5,"column_end":80}},{"value":"/ the default, then this is a no-op.","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/builder.rs","byte_start":6865,"byte_end":6903,"line_start":147,"line_end":147,"column_start":5,"column_end":43}},{"value":"inline","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/builder.rs","byte_start":6908,"byte_end":6917,"line_start":148,"line_end":148,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":35},"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/builder.rs","byte_start":7316,"byte_end":7332,"line_start":160,"line_end":160,"column_start":12,"column_end":28},"name":"push_slot_always","qualname":"<FlatBufferBuilder>::push_slot_always","value":"fn <X> (&mut self, slotoff: VOffsetT, x: X) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Push a Push'able value onto the front of the in-progress data, and\n store a reference to it in the in-progress vtable.\n","sig":null,"attributes":[{"value":"/ Push a Push'able value onto the front of the in-progress data, and","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/builder.rs","byte_start":7161,"byte_end":7231,"line_start":157,"line_end":157,"column_start":5,"column_end":75}},{"value":"/ store a reference to it in the in-progress vtable.","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/builder.rs","byte_start":7236,"byte_end":7290,"line_start":158,"line_end":158,"column_start":5,"column_end":59}},{"value":"inline","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/builder.rs","byte_start":7295,"byte_end":7304,"line_start":159,"line_end":159,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":37},"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/builder.rs","byte_start":7688,"byte_end":7707,"line_start":169,"line_end":169,"column_start":12,"column_end":31},"name":"num_written_vtables","qualname":"<FlatBufferBuilder>::num_written_vtables","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Retrieve the number of vtables that have been serialized into the\n FlatBuffer. This is primarily used to check vtable deduplication.\n","sig":null,"attributes":[{"value":"/ Retrieve the number of vtables that have been serialized into the","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/builder.rs","byte_start":7519,"byte_end":7588,"line_start":166,"line_end":166,"column_start":5,"column_end":74}},{"value":"/ FlatBuffer. This is primarily used to check vtable deduplication.","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/builder.rs","byte_start":7593,"byte_end":7662,"line_start":167,"line_end":167,"column_start":5,"column_end":74}},{"value":"inline","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/builder.rs","byte_start":7667,"byte_end":7676,"line_start":168,"line_end":168,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":38},"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/builder.rs","byte_start":7984,"byte_end":7995,"line_start":179,"line_end":179,"column_start":12,"column_end":23},"name":"start_table","qualname":"<FlatBufferBuilder>::start_table","value":"fn (&mut self) -> WIPOffset<TableUnfinishedWIPOffset>","parent":null,"children":[],"decl_id":null,"docs":" Start a Table write.","sig":null,"attributes":[{"value":"/ Start a Table write.","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/builder.rs","byte_start":7778,"byte_end":7802,"line_start":173,"line_end":173,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/builder.rs","byte_start":7807,"byte_end":7810,"line_start":174,"line_end":174,"column_start":5,"column_end":8}},{"value":"/ Asserts that the builder is not in a nested state.","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/builder.rs","byte_start":7815,"byte_end":7869,"line_start":175,"line_end":175,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/builder.rs","byte_start":7874,"byte_end":7877,"line_start":176,"line_end":176,"column_start":5,"column_end":8}},{"value":"/ Users probably want to use `push_slot` to add values after calling this.","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/builder.rs","byte_start":7882,"byte_end":7958,"line_start":177,"line_end":177,"column_start":5,"column_end":81}},{"value":"inline","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/builder.rs","byte_start":7963,"byte_end":7972,"line_start":178,"line_end":178,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":39},"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/builder.rs","byte_start":8386,"byte_end":8395,"line_start":192,"line_end":192,"column_start":12,"column_end":21},"name":"end_table","qualname":"<FlatBufferBuilder>::end_table","value":"fn (&mut self, off: WIPOffset<TableUnfinishedWIPOffset>) -> WIPOffset<TableFinishedWIPOffset>","parent":null,"children":[],"decl_id":null,"docs":" End a Table write.","sig":null,"attributes":[{"value":"/ End a Table write.","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/builder.rs","byte_start":8275,"byte_end":8297,"line_start":188,"line_end":188,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/builder.rs","byte_start":8302,"byte_end":8305,"line_start":189,"line_end":189,"column_start":5,"column_end":8}},{"value":"/ Asserts that the builder is in a nested state.","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/builder.rs","byte_start":8310,"byte_end":8360,"line_start":190,"line_end":190,"column_start":5,"column_end":55}},{"value":"inline","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/builder.rs","byte_start":8365,"byte_end":8374,"line_start":191,"line_end":191,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":40},"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/builder.rs","byte_start":9020,"byte_end":9032,"line_start":214,"line_end":214,"column_start":12,"column_end":24},"name":"start_vector","qualname":"<FlatBufferBuilder>::start_vector","value":"fn <T> (&mut self, num_items: usize) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Start a Vector write.","sig":null,"attributes":[{"value":"/ Start a Vector write.","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/builder.rs","byte_start":8702,"byte_end":8727,"line_start":206,"line_end":206,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/builder.rs","byte_start":8732,"byte_end":8735,"line_start":207,"line_end":207,"column_start":5,"column_end":8}},{"value":"/ Asserts that the builder is not in a nested state.","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/builder.rs","byte_start":8740,"byte_end":8794,"line_start":208,"line_end":208,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/builder.rs","byte_start":8799,"byte_end":8802,"line_start":209,"line_end":209,"column_start":5,"column_end":8}},{"value":"/ Most users will prefer to call `create_vector`.","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/builder.rs","byte_start":8807,"byte_end":8858,"line_start":210,"line_end":210,"column_start":5,"column_end":56}},{"value":"/ Speed optimizing users who choose to create vectors manually using this","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/builder.rs","byte_start":8863,"byte_end":8938,"line_start":211,"line_end":211,"column_start":5,"column_end":80}},{"value":"/ function will want to use `push` to add values.","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/builder.rs","byte_start":8943,"byte_end":8994,"line_start":212,"line_end":212,"column_start":5,"column_end":56}},{"value":"inline","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/builder.rs","byte_start":8999,"byte_end":9008,"line_start":213,"line_end":213,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":42},"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/builder.rs","byte_start":9550,"byte_end":9560,"line_start":229,"line_end":229,"column_start":12,"column_end":22},"name":"end_vector","qualname":"<FlatBufferBuilder>::end_vector","value":"fn <T> (&mut self, num_elems: usize) -> WIPOffset<Vector<'fbb, T>>","parent":null,"children":[],"decl_id":null,"docs":" End a Vector write.","sig":null,"attributes":[{"value":"/ End a Vector write.","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/builder.rs","byte_start":9326,"byte_end":9349,"line_start":222,"line_end":222,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/builder.rs","byte_start":9354,"byte_end":9357,"line_start":223,"line_end":223,"column_start":5,"column_end":8}},{"value":"/ Note that the `num_elems` parameter is the number of written items, not","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/builder.rs","byte_start":9362,"byte_end":9437,"line_start":224,"line_end":224,"column_start":5,"column_end":80}},{"value":"/ the byte count.","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/builder.rs","byte_start":9442,"byte_end":9461,"line_start":225,"line_end":225,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/builder.rs","byte_start":9466,"byte_end":9469,"line_start":226,"line_end":226,"column_start":5,"column_end":8}},{"value":"/ Asserts that the builder is in a nested state.","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/builder.rs","byte_start":9474,"byte_end":9524,"line_start":227,"line_end":227,"column_start":5,"column_end":55}},{"value":"inline","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/builder.rs","byte_start":9529,"byte_end":9538,"line_start":228,"line_end":228,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":44},"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/builder.rs","byte_start":9942,"byte_end":9955,"line_start":240,"line_end":240,"column_start":12,"column_end":25},"name":"create_string","qualname":"<FlatBufferBuilder>::create_string","value":"fn <'a, 'b> (&'a mut self, s: &'b str) -> WIPOffset<&'fbb str>","parent":null,"children":[],"decl_id":null,"docs":" Create a utf8 string.","sig":null,"attributes":[{"value":"/ Create a utf8 string.","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/builder.rs","byte_start":9809,"byte_end":9834,"line_start":236,"line_end":236,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/builder.rs","byte_start":9839,"byte_end":9842,"line_start":237,"line_end":237,"column_start":5,"column_end":8}},{"value":"/ The wire format represents this as a zero-terminated byte vector.","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/builder.rs","byte_start":9847,"byte_end":9916,"line_start":238,"line_end":238,"column_start":5,"column_end":74}},{"value":"inline","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/builder.rs","byte_start":9921,"byte_end":9930,"line_start":239,"line_end":239,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":47},"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/builder.rs","byte_start":10303,"byte_end":10321,"line_start":249,"line_end":249,"column_start":12,"column_end":30},"name":"create_byte_string","qualname":"<FlatBufferBuilder>::create_byte_string","value":"fn (&mut self, data: &[u8]) -> WIPOffset<&'fbb [u8]>","parent":null,"children":[],"decl_id":null,"docs":" Create a zero-terminated byte vector.\n","sig":null,"attributes":[{"value":"/ Create a zero-terminated byte vector.","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/builder.rs","byte_start":10236,"byte_end":10277,"line_start":247,"line_end":247,"column_start":5,"column_end":46}},{"value":"inline","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/builder.rs","byte_start":10282,"byte_end":10291,"line_start":248,"line_end":248,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":48},"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/builder.rs","byte_start":11174,"byte_end":11194,"line_start":267,"line_end":267,"column_start":12,"column_end":32},"name":"create_vector_direct","qualname":"<FlatBufferBuilder>::create_vector_direct","value":"fn <'a, 'b, T> (&'a mut self, items: &'b [T]) -> WIPOffset<Vector<'fbb, T>>","parent":null,"children":[],"decl_id":null,"docs":" Create a vector by memcpy'ing. This is much faster than calling\n `create_vector`, but the underlying type must be represented as\n little-endian on the host machine. This property is encoded in the\n type system through the SafeSliceAccess trait. The following types are\n always safe, on any platform: bool, u8, i8, and any\n FlatBuffers-generated struct.\n","sig":null,"attributes":[{"value":"/ Create a vector by memcpy'ing. This is much faster than calling","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/builder.rs","byte_start":10757,"byte_end":10824,"line_start":260,"line_end":260,"column_start":5,"column_end":72}},{"value":"/ `create_vector`, but the underlying type must be represented as","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/builder.rs","byte_start":10829,"byte_end":10896,"line_start":261,"line_end":261,"column_start":5,"column_end":72}},{"value":"/ little-endian on the host machine. This property is encoded in the","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/builder.rs","byte_start":10901,"byte_end":10971,"line_start":262,"line_end":262,"column_start":5,"column_end":75}},{"value":"/ type system through the SafeSliceAccess trait. The following types are","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/builder.rs","byte_start":10976,"byte_end":11050,"line_start":263,"line_end":263,"column_start":5,"column_end":79}},{"value":"/ always safe, on any platform: bool, u8, i8, and any","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/builder.rs","byte_start":11055,"byte_end":11110,"line_start":264,"line_end":264,"column_start":5,"column_end":60}},{"value":"/ FlatBuffers-generated struct.","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/builder.rs","byte_start":11115,"byte_end":11148,"line_start":265,"line_end":265,"column_start":5,"column_end":38}},{"value":"inline","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/builder.rs","byte_start":11153,"byte_end":11162,"line_start":266,"line_end":266,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":52},"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/builder.rs","byte_start":12123,"byte_end":12147,"line_start":292,"line_end":292,"column_start":12,"column_end":36},"name":"create_vector_of_strings","qualname":"<FlatBufferBuilder>::create_vector_of_strings","value":"fn <'a, 'b> (&'a mut self, xs: &'b [&'b str]) -> WIPOffset<Vector<'fbb, ForwardsUOffset<&'fbb str>>>","parent":null,"children":[],"decl_id":null,"docs":" Create a vector of strings.","sig":null,"attributes":[{"value":"/ Create a vector of strings.","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/builder.rs","byte_start":11909,"byte_end":11940,"line_start":287,"line_end":287,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/builder.rs","byte_start":11945,"byte_end":11948,"line_start":288,"line_end":288,"column_start":5,"column_end":8}},{"value":"/ Speed-sensitive users may wish to reduce memory usage by creating the","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/builder.rs","byte_start":11953,"byte_end":12026,"line_start":289,"line_end":289,"column_start":5,"column_end":78}},{"value":"/ vector manually: use `start_vector`, `push`, and `end_vector`.","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/builder.rs","byte_start":12031,"byte_end":12097,"line_start":290,"line_end":290,"column_start":5,"column_end":71}},{"value":"inline","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/builder.rs","byte_start":12102,"byte_end":12111,"line_start":291,"line_end":291,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":56},"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/builder.rs","byte_start":13292,"byte_end":13305,"line_start":318,"line_end":318,"column_start":12,"column_end":25},"name":"create_vector","qualname":"<FlatBufferBuilder>::create_vector","value":"fn <'a, 'b, T> (&'a mut self, items: &'b [T]) -> WIPOffset<Vector<'fbb, T::Output>>","parent":null,"children":[],"decl_id":null,"docs":" Create a vector of Push-able objects.","sig":null,"attributes":[{"value":"/ Create a vector of Push-able objects.","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/builder.rs","byte_start":13068,"byte_end":13109,"line_start":313,"line_end":313,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/builder.rs","byte_start":13114,"byte_end":13117,"line_start":314,"line_end":314,"column_start":5,"column_end":8}},{"value":"/ Speed-sensitive users may wish to reduce memory usage by creating the","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/builder.rs","byte_start":13122,"byte_end":13195,"line_start":315,"line_end":315,"column_start":5,"column_end":78}},{"value":"/ vector manually: use `start_vector`, `push`, and `end_vector`.","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/builder.rs","byte_start":13200,"byte_end":13266,"line_start":316,"line_end":316,"column_start":5,"column_end":71}},{"value":"inline","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/builder.rs","byte_start":13271,"byte_end":13280,"line_start":317,"line_end":317,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":60},"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/builder.rs","byte_start":13860,"byte_end":13875,"line_start":333,"line_end":333,"column_start":12,"column_end":27},"name":"unfinished_data","qualname":"<FlatBufferBuilder>::unfinished_data","value":"fn (&self) -> &[u8]","parent":null,"children":[],"decl_id":null,"docs":" Get the byte slice for the data that has been written, regardless of\n whether it has been finished.\n","sig":null,"attributes":[{"value":"/ Get the byte slice for the data that has been written, regardless of","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/builder.rs","byte_start":13724,"byte_end":13796,"line_start":330,"line_end":330,"column_start":5,"column_end":77}},{"value":"/ whether it has been finished.","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/builder.rs","byte_start":13801,"byte_end":13834,"line_start":331,"line_end":331,"column_start":5,"column_end":38}},{"value":"inline","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/builder.rs","byte_start":13839,"byte_end":13848,"line_start":332,"line_end":332,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":61},"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/builder.rs","byte_start":14079,"byte_end":14092,"line_start":339,"line_end":339,"column_start":12,"column_end":25},"name":"finished_data","qualname":"<FlatBufferBuilder>::finished_data","value":"fn (&self) -> &[u8]","parent":null,"children":[],"decl_id":null,"docs":" Get the byte slice for the data that has been written after a call to\n one of the `finish` functions.\n","sig":null,"attributes":[{"value":"/ Get the byte slice for the data that has been written after a call to","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/builder.rs","byte_start":13941,"byte_end":14014,"line_start":336,"line_end":336,"column_start":5,"column_end":78}},{"value":"/ one of the `finish` functions.","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/builder.rs","byte_start":14019,"byte_end":14053,"line_start":337,"line_end":337,"column_start":5,"column_end":39}},{"value":"inline","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/builder.rs","byte_start":14058,"byte_end":14067,"line_start":338,"line_end":338,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":62},"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/builder.rs","byte_start":14432,"byte_end":14440,"line_start":347,"line_end":347,"column_start":12,"column_end":20},"name":"required","qualname":"<FlatBufferBuilder>::required","value":"fn (&self, tab_revloc: WIPOffset<TableFinishedWIPOffset>, slot_byte_loc: VOffsetT, assert_msg_name: &'static str) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Assert that a field is present in the just-finished Table.","sig":null,"attributes":[{"value":"/ Assert that a field is present in the just-finished Table.","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/builder.rs","byte_start":14259,"byte_end":14321,"line_start":343,"line_end":343,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/builder.rs","byte_start":14326,"byte_end":14329,"line_start":344,"line_end":344,"column_start":5,"column_end":8}},{"value":"/ This is somewhat low-level and is mostly used by the generated code.","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/builder.rs","byte_start":14334,"byte_end":14406,"line_start":345,"line_end":345,"column_start":5,"column_end":77}},{"value":"inline","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/builder.rs","byte_start":14411,"byte_end":14420,"line_start":346,"line_end":346,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":63},"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/builder.rs","byte_start":15177,"byte_end":15197,"line_start":364,"line_end":364,"column_start":12,"column_end":32},"name":"finish_size_prefixed","qualname":"<FlatBufferBuilder>::finish_size_prefixed","value":"fn <T> (&mut self, root: WIPOffset<T>, file_identifier: Option<&str>) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Finalize the FlatBuffer by: aligning it, pushing an optional file\n identifier on to it, pushing a size prefix on to it, and marking the\n internal state of the FlatBufferBuilder as `finished`. Afterwards,\n users can call `finished_data` to get the resulting data.\n","sig":null,"attributes":[{"value":"/ Finalize the FlatBuffer by: aligning it, pushing an optional file","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/builder.rs","byte_start":14864,"byte_end":14933,"line_start":359,"line_end":359,"column_start":5,"column_end":74}},{"value":"/ identifier on to it, pushing a size prefix on to it, and marking the","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/builder.rs","byte_start":14938,"byte_end":15010,"line_start":360,"line_end":360,"column_start":5,"column_end":77}},{"value":"/ internal state of the FlatBufferBuilder as `finished`. Afterwards,","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/builder.rs","byte_start":15015,"byte_end":15085,"line_start":361,"line_end":361,"column_start":5,"column_end":75}},{"value":"/ users can call `finished_data` to get the resulting data.","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/builder.rs","byte_start":15090,"byte_end":15151,"line_start":362,"line_end":362,"column_start":5,"column_end":66}},{"value":"inline","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/builder.rs","byte_start":15156,"byte_end":15165,"line_start":363,"line_end":363,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":65},"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/builder.rs","byte_start":15617,"byte_end":15623,"line_start":373,"line_end":373,"column_start":12,"column_end":18},"name":"finish","qualname":"<FlatBufferBuilder>::finish","value":"fn <T> (&mut self, root: WIPOffset<T>, file_identifier: Option<&str>) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Finalize the FlatBuffer by: aligning it, pushing an optional file\n identifier on to it, and marking the internal state of the\n FlatBufferBuilder as `finished`. Afterwards, users can call\n `finished_data` to get the resulting data.\n","sig":null,"attributes":[{"value":"/ Finalize the FlatBuffer by: aligning it, pushing an optional file","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/builder.rs","byte_start":15336,"byte_end":15405,"line_start":368,"line_end":368,"column_start":5,"column_end":74}},{"value":"/ identifier on to it, and marking the internal state of the","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/builder.rs","byte_start":15410,"byte_end":15472,"line_start":369,"line_end":369,"column_start":5,"column_end":67}},{"value":"/ FlatBufferBuilder as `finished`. Afterwards, users can call","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/builder.rs","byte_start":15477,"byte_end":15540,"line_start":370,"line_end":370,"column_start":5,"column_end":68}},{"value":"/ `finished_data` to get the resulting data.","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/builder.rs","byte_start":15545,"byte_end":15591,"line_start":371,"line_end":371,"column_start":5,"column_end":51}},{"value":"inline","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/builder.rs","byte_start":15596,"byte_end":15605,"line_start":372,"line_end":372,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":67},"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/builder.rs","byte_start":15989,"byte_end":16003,"line_start":381,"line_end":381,"column_start":12,"column_end":26},"name":"finish_minimal","qualname":"<FlatBufferBuilder>::finish_minimal","value":"fn <T> (&mut self, root: WIPOffset<T>) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Finalize the FlatBuffer by: aligning it and marking the internal state\n of the FlatBufferBuilder as `finished`. Afterwards, users can call\n `finished_data` to get the resulting data.\n","sig":null,"attributes":[{"value":"/ Finalize the FlatBuffer by: aligning it and marking the internal state","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/builder.rs","byte_start":15763,"byte_end":15837,"line_start":377,"line_end":377,"column_start":5,"column_end":79}},{"value":"/ of the FlatBufferBuilder as `finished`. Afterwards, users can call","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/builder.rs","byte_start":15842,"byte_end":15912,"line_start":378,"line_end":378,"column_start":5,"column_end":75}},{"value":"/ `finished_data` to get the resulting data.","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/builder.rs","byte_start":15917,"byte_end":15963,"line_start":379,"line_end":379,"column_start":5,"column_end":51}},{"value":"inline","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/builder.rs","byte_start":15968,"byte_end":15977,"line_start":380,"line_end":380,"column_start":5,"column_end":14}}]},{"kind":"Trait","id":{"krate":0,"index":94},"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/endian_scalar.rs","byte_start":28337,"byte_end":28349,"line_start":29,"line_end":29,"column_start":11,"column_end":23},"name":"EndianScalar","qualname":"::endian_scalar::EndianScalar","value":"EndianScalar: Sized + PartialEq + Copy + Clone","parent":null,"children":[{"krate":0,"index":95},{"krate":0,"index":96}],"decl_id":null,"docs":" Trait for values that must be stored in little-endian byte order, but\n might be represented in memory as big-endian. Every type that implements\n EndianScalar is a valid FlatBuffers scalar value.","sig":null,"attributes":[{"value":"/ Trait for values that must be stored in little-endian byte order, but","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/endian_scalar.rs","byte_start":27816,"byte_end":27889,"line_start":19,"line_end":19,"column_start":1,"column_end":74}},{"value":"/ might be represented in memory as big-endian. Every type that implements","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/endian_scalar.rs","byte_start":27890,"byte_end":27966,"line_start":20,"line_end":20,"column_start":1,"column_end":77}},{"value":"/ EndianScalar is a valid FlatBuffers scalar value.","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/endian_scalar.rs","byte_start":27967,"byte_end":28020,"line_start":21,"line_end":21,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/endian_scalar.rs","byte_start":28021,"byte_end":28024,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ The Rust stdlib does not provide a trait to represent scalars, so this trait","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/endian_scalar.rs","byte_start":28025,"byte_end":28105,"line_start":23,"line_end":23,"column_start":1,"column_end":81}},{"value":"/ serves that purpose, too.","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/endian_scalar.rs","byte_start":28106,"byte_end":28135,"line_start":24,"line_end":24,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/endian_scalar.rs","byte_start":28136,"byte_end":28139,"line_start":25,"line_end":25,"column_start":1,"column_end":4}},{"value":"/ Note that we do not use the num-traits crate for this, because it provides","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/endian_scalar.rs","byte_start":28140,"byte_end":28218,"line_start":26,"line_end":26,"column_start":1,"column_end":79}},{"value":"/ \"too much\". For example, num-traits provides i128 support, but that is an","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/endian_scalar.rs","byte_start":28219,"byte_end":28296,"line_start":27,"line_end":27,"column_start":1,"column_end":78}},{"value":"/ invalid FlatBuffers type.","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/endian_scalar.rs","byte_start":28297,"byte_end":28326,"line_start":28,"line_end":28,"column_start":1,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":95},"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/endian_scalar.rs","byte_start":28393,"byte_end":28409,"line_start":30,"line_end":30,"column_start":8,"column_end":24},"name":"to_little_endian","qualname":"::endian_scalar::EndianScalar::to_little_endian","value":"fn (self) -> Self","parent":{"krate":0,"index":94},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":96},"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/endian_scalar.rs","byte_start":28432,"byte_end":28450,"line_start":31,"line_end":31,"column_start":8,"column_end":26},"name":"from_little_endian","qualname":"::endian_scalar::EndianScalar::from_little_endian","value":"fn (self) -> Self","parent":{"krate":0,"index":94},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":105},"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/endian_scalar.rs","byte_start":31215,"byte_end":31228,"line_start":138,"line_end":138,"column_start":8,"column_end":21},"name":"byte_swap_f32","qualname":"::endian_scalar::byte_swap_f32","value":"fn (x: f32) -> f32","parent":null,"children":[],"decl_id":null,"docs":" Swaps the bytes of an f32.\n","sig":null,"attributes":[{"value":"/ Swaps the bytes of an f32.","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/endian_scalar.rs","byte_start":31147,"byte_end":31177,"line_start":135,"line_end":135,"column_start":1,"column_end":31}},{"value":"allow(dead_code)","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/endian_scalar.rs","byte_start":31178,"byte_end":31197,"line_start":136,"line_end":136,"column_start":1,"column_end":20}},{"value":"inline","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/endian_scalar.rs","byte_start":31198,"byte_end":31207,"line_start":137,"line_end":137,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":106},"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/endian_scalar.rs","byte_start":31362,"byte_end":31375,"line_start":145,"line_end":145,"column_start":8,"column_end":21},"name":"byte_swap_f64","qualname":"::endian_scalar::byte_swap_f64","value":"fn (x: f64) -> f64","parent":null,"children":[],"decl_id":null,"docs":" Swaps the bytes of an f64.\n","sig":null,"attributes":[{"value":"/ Swaps the bytes of an f64.","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/endian_scalar.rs","byte_start":31294,"byte_end":31324,"line_start":142,"line_end":142,"column_start":1,"column_end":31}},{"value":"allow(dead_code)","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/endian_scalar.rs","byte_start":31325,"byte_end":31344,"line_start":143,"line_end":143,"column_start":1,"column_end":20}},{"value":"inline","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/endian_scalar.rs","byte_start":31345,"byte_end":31354,"line_start":144,"line_end":144,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":107},"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/endian_scalar.rs","byte_start":31568,"byte_end":31582,"line_start":152,"line_end":152,"column_start":8,"column_end":22},"name":"emplace_scalar","qualname":"::endian_scalar::emplace_scalar","value":"fn <T> (s: &mut [u8], x: T) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Place an EndianScalar into the provided mutable byte slice. Performs\n endian conversion, if necessary.\n","sig":null,"attributes":[{"value":"/ Place an EndianScalar into the provided mutable byte slice. Performs","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/endian_scalar.rs","byte_start":31441,"byte_end":31513,"line_start":149,"line_end":149,"column_start":1,"column_end":73}},{"value":"/ endian conversion, if necessary.","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/endian_scalar.rs","byte_start":31514,"byte_end":31550,"line_start":150,"line_end":150,"column_start":1,"column_end":37}},{"value":"inline","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/endian_scalar.rs","byte_start":31551,"byte_end":31560,"line_start":151,"line_end":151,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":109},"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/endian_scalar.rs","byte_start":31934,"byte_end":31948,"line_start":164,"line_end":164,"column_start":8,"column_end":22},"name":"read_scalar_at","qualname":"::endian_scalar::read_scalar_at","value":"fn <T> (s: &[u8], loc: usize) -> T","parent":null,"children":[],"decl_id":null,"docs":" Read an EndianScalar from the provided byte slice at the specified location.\n Performs endian conversion, if necessary.\n","sig":null,"attributes":[{"value":"/ Read an EndianScalar from the provided byte slice at the specified location.","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/endian_scalar.rs","byte_start":31790,"byte_end":31870,"line_start":161,"line_end":161,"column_start":1,"column_end":81}},{"value":"/ Performs endian conversion, if necessary.","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/endian_scalar.rs","byte_start":31871,"byte_end":31916,"line_start":162,"line_end":162,"column_start":1,"column_end":46}},{"value":"inline","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/endian_scalar.rs","byte_start":31917,"byte_end":31926,"line_start":163,"line_end":163,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":111},"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/endian_scalar.rs","byte_start":32182,"byte_end":32193,"line_start":172,"line_end":172,"column_start":8,"column_end":19},"name":"read_scalar","qualname":"::endian_scalar::read_scalar","value":"fn <T> (s: &[u8]) -> T","parent":null,"children":[],"decl_id":null,"docs":" Read an EndianScalar from the provided byte slice. Performs endian\n conversion, if necessary.\n","sig":null,"attributes":[{"value":"/ Read an EndianScalar from the provided byte slice. Performs endian","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/endian_scalar.rs","byte_start":32064,"byte_end":32134,"line_start":169,"line_end":169,"column_start":1,"column_end":71}},{"value":"/ conversion, if necessary.","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/endian_scalar.rs","byte_start":32135,"byte_end":32164,"line_start":170,"line_end":170,"column_start":1,"column_end":30}},{"value":"inline","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/endian_scalar.rs","byte_start":32165,"byte_end":32174,"line_start":171,"line_end":171,"column_start":1,"column_end":10}}]},{"kind":"Trait","id":{"krate":0,"index":115},"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/follow.rs","byte_start":33669,"byte_end":33675,"line_start":30,"line_end":30,"column_start":11,"column_end":17},"name":"Follow","qualname":"::follow::Follow","value":"Follow<'a>","parent":null,"children":[{"krate":0,"index":117},{"krate":0,"index":118}],"decl_id":null,"docs":" Follow is a trait that allows us to access FlatBuffers in a declarative,\n type safe, and fast way. They compile down to almost no code (after\n optimizations). Conceptually, Follow lifts the offset-based access\n patterns of FlatBuffers data into the type system. This trait is used\n pervasively at read time, to access tables, vtables, vectors, strings, and\n all other data. At this time, Follow is not utilized much on the write\n path.","sig":null,"attributes":[{"value":"/ Follow is a trait that allows us to access FlatBuffers in a declarative,","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/follow.rs","byte_start":33009,"byte_end":33085,"line_start":19,"line_end":19,"column_start":1,"column_end":77}},{"value":"/ type safe, and fast way. They compile down to almost no code (after","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/follow.rs","byte_start":33086,"byte_end":33157,"line_start":20,"line_end":20,"column_start":1,"column_end":72}},{"value":"/ optimizations). Conceptually, Follow lifts the offset-based access","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/follow.rs","byte_start":33158,"byte_end":33228,"line_start":21,"line_end":21,"column_start":1,"column_end":71}},{"value":"/ patterns of FlatBuffers data into the type system. This trait is used","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/follow.rs","byte_start":33229,"byte_end":33302,"line_start":22,"line_end":22,"column_start":1,"column_end":74}},{"value":"/ pervasively at read time, to access tables, vtables, vectors, strings, and","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/follow.rs","byte_start":33303,"byte_end":33381,"line_start":23,"line_end":23,"column_start":1,"column_end":79}},{"value":"/ all other data. At this time, Follow is not utilized much on the write","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/follow.rs","byte_start":33382,"byte_end":33456,"line_start":24,"line_end":24,"column_start":1,"column_end":75}},{"value":"/ path.","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/follow.rs","byte_start":33457,"byte_end":33466,"line_start":25,"line_end":25,"column_start":1,"column_end":10}},{"value":"/","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/follow.rs","byte_start":33467,"byte_end":33470,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"/ Writing a new Follow implementation primarily involves deciding whether","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/follow.rs","byte_start":33471,"byte_end":33546,"line_start":27,"line_end":27,"column_start":1,"column_end":76}},{"value":"/ you want to return data (of the type Self::Inner) or do you want to","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/follow.rs","byte_start":33547,"byte_end":33618,"line_start":28,"line_end":28,"column_start":1,"column_end":72}},{"value":"/ continue traversing the FlatBuffer.","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/follow.rs","byte_start":33619,"byte_end":33658,"line_start":29,"line_end":29,"column_start":1,"column_end":40}}]},{"kind":"Type","id":{"krate":0,"index":117},"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/follow.rs","byte_start":33691,"byte_end":33696,"line_start":31,"line_end":31,"column_start":10,"column_end":15},"name":"Inner","qualname":"::follow::Follow::Inner","value":"type Inner;","parent":{"krate":0,"index":115},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":118},"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/follow.rs","byte_start":33705,"byte_end":33711,"line_start":32,"line_end":32,"column_start":8,"column_end":14},"name":"follow","qualname":"::follow::Follow::follow","value":"fn (buf: &'a [u8], loc: usize) -> Self::Inner","parent":{"krate":0,"index":115},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":539},"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/follow.rs","byte_start":34087,"byte_end":34098,"line_start":45,"line_end":45,"column_start":12,"column_end":23},"name":"FollowStart","qualname":"::follow::FollowStart","value":"","parent":null,"children":[],"decl_id":null,"docs":" FollowStart wraps a Follow impl in a struct type. This can make certain\n programming patterns more ergonomic.\n","sig":null,"attributes":[{"value":"/ FollowStart wraps a Follow impl in a struct type. This can make certain","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/follow.rs","byte_start":33942,"byte_end":34017,"line_start":42,"line_end":42,"column_start":1,"column_end":76}},{"value":"/ programming patterns more ergonomic.","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/follow.rs","byte_start":34018,"byte_end":34058,"line_start":43,"line_end":43,"column_start":1,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":125},"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/follow.rs","byte_start":34190,"byte_end":34193,"line_start":48,"line_end":48,"column_start":12,"column_end":15},"name":"new","qualname":"<FollowStart<T>>::new","value":"fn () -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/follow.rs","byte_start":34169,"byte_end":34178,"line_start":47,"line_end":47,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":126},"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/follow.rs","byte_start":34269,"byte_end":34280,"line_start":52,"line_end":52,"column_start":12,"column_end":23},"name":"self_follow","qualname":"<FollowStart<T>>::self_follow","value":"fn (&'a self, buf: &'a [u8], loc: usize) -> T::Inner","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/follow.rs","byte_start":34248,"byte_end":34257,"line_start":51,"line_end":51,"column_start":5,"column_end":14}}]},{"kind":"Const","id":{"krate":0,"index":142},"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/primitives.rs","byte_start":35365,"byte_end":35392,"line_start":25,"line_end":25,"column_start":11,"column_end":38},"name":"FLATBUFFERS_MAX_BUFFER_SIZE","qualname":"::primitives::FLATBUFFERS_MAX_BUFFER_SIZE","value":"usize","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":143},"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/primitives.rs","byte_start":35436,"byte_end":35458,"line_start":27,"line_end":27,"column_start":11,"column_end":33},"name":"FILE_IDENTIFIER_LENGTH","qualname":"::primitives::FILE_IDENTIFIER_LENGTH","value":"usize","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":144},"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/primitives.rs","byte_start":35482,"byte_end":35504,"line_start":29,"line_end":29,"column_start":11,"column_end":33},"name":"VTABLE_METADATA_FIELDS","qualname":"::primitives::VTABLE_METADATA_FIELDS","value":"usize","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":145},"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/primitives.rs","byte_start":35528,"byte_end":35535,"line_start":31,"line_end":31,"column_start":11,"column_end":18},"name":"SIZE_U8","qualname":"::primitives::SIZE_U8","value":"usize","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":146},"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/primitives.rs","byte_start":35572,"byte_end":35579,"line_start":32,"line_end":32,"column_start":11,"column_end":18},"name":"SIZE_I8","qualname":"::primitives::SIZE_I8","value":"usize","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":147},"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/primitives.rs","byte_start":35617,"byte_end":35625,"line_start":34,"line_end":34,"column_start":11,"column_end":19},"name":"SIZE_U16","qualname":"::primitives::SIZE_U16","value":"usize","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":148},"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/primitives.rs","byte_start":35663,"byte_end":35671,"line_start":35,"line_end":35,"column_start":11,"column_end":19},"name":"SIZE_I16","qualname":"::primitives::SIZE_I16","value":"usize","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":149},"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/primitives.rs","byte_start":35710,"byte_end":35718,"line_start":37,"line_end":37,"column_start":11,"column_end":19},"name":"SIZE_U32","qualname":"::primitives::SIZE_U32","value":"usize","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":150},"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/primitives.rs","byte_start":35756,"byte_end":35764,"line_start":38,"line_end":38,"column_start":11,"column_end":19},"name":"SIZE_I32","qualname":"::primitives::SIZE_I32","value":"usize","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":151},"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/primitives.rs","byte_start":35803,"byte_end":35811,"line_start":40,"line_end":40,"column_start":11,"column_end":19},"name":"SIZE_U64","qualname":"::primitives::SIZE_U64","value":"usize","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":152},"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/primitives.rs","byte_start":35849,"byte_end":35857,"line_start":41,"line_end":41,"column_start":11,"column_end":19},"name":"SIZE_I64","qualname":"::primitives::SIZE_I64","value":"usize","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":153},"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/primitives.rs","byte_start":35896,"byte_end":35904,"line_start":43,"line_end":43,"column_start":11,"column_end":19},"name":"SIZE_F32","qualname":"::primitives::SIZE_F32","value":"usize","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":154},"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/primitives.rs","byte_start":35942,"byte_end":35950,"line_start":44,"line_end":44,"column_start":11,"column_end":19},"name":"SIZE_F64","qualname":"::primitives::SIZE_F64","value":"usize","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":155},"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/primitives.rs","byte_start":35989,"byte_end":36001,"line_start":46,"line_end":46,"column_start":11,"column_end":23},"name":"SIZE_SOFFSET","qualname":"::primitives::SIZE_SOFFSET","value":"usize","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":156},"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/primitives.rs","byte_start":36031,"byte_end":36043,"line_start":47,"line_end":47,"column_start":11,"column_end":23},"name":"SIZE_UOFFSET","qualname":"::primitives::SIZE_UOFFSET","value":"usize","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":157},"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/primitives.rs","byte_start":36073,"byte_end":36085,"line_start":48,"line_end":48,"column_start":11,"column_end":23},"name":"SIZE_VOFFSET","qualname":"::primitives::SIZE_VOFFSET","value":"usize","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":158},"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/primitives.rs","byte_start":36116,"byte_end":36131,"line_start":50,"line_end":50,"column_start":11,"column_end":26},"name":"SIZE_SIZEPREFIX","qualname":"::primitives::SIZE_SIZEPREFIX","value":"usize","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":159},"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/primitives.rs","byte_start":36239,"byte_end":36247,"line_start":53,"line_end":53,"column_start":10,"column_end":18},"name":"SOffsetT","qualname":"::primitives::SOffsetT","value":"i32","parent":null,"children":[],"decl_id":null,"docs":" SOffsetT is an i32 that is used by tables to reference their vtables.\n","sig":null,"attributes":[{"value":"/ SOffsetT is an i32 that is used by tables to reference their vtables.","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/primitives.rs","byte_start":36156,"byte_end":36229,"line_start":52,"line_end":52,"column_start":1,"column_end":74}}]},{"kind":"Type","id":{"krate":0,"index":160},"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/primitives.rs","byte_start":36370,"byte_end":36378,"line_start":57,"line_end":57,"column_start":10,"column_end":18},"name":"UOffsetT","qualname":"::primitives::UOffsetT","value":"u32","parent":null,"children":[],"decl_id":null,"docs":" UOffsetT is a u32 that is used by pervasively to represent both pointers\n and lengths of vectors.\n","sig":null,"attributes":[{"value":"/ UOffsetT is a u32 that is used by pervasively to represent both pointers","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/primitives.rs","byte_start":36256,"byte_end":36332,"line_start":55,"line_end":55,"column_start":1,"column_end":77}},{"value":"/ and lengths of vectors.","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/primitives.rs","byte_start":36333,"byte_end":36360,"line_start":56,"line_end":56,"column_start":1,"column_end":28}}]},{"kind":"Type","id":{"krate":0,"index":161},"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/primitives.rs","byte_start":36463,"byte_end":36471,"line_start":60,"line_end":60,"column_start":10,"column_end":18},"name":"VOffsetT","qualname":"::primitives::VOffsetT","value":"i16","parent":null,"children":[],"decl_id":null,"docs":" VOffsetT is a i32 that is used by vtables to store field data.\n","sig":null,"attributes":[{"value":"/ VOffsetT is a i32 that is used by vtables to store field data.","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/primitives.rs","byte_start":36387,"byte_end":36453,"line_start":59,"line_end":59,"column_start":1,"column_end":67}}]},{"kind":"Struct","id":{"krate":0,"index":546},"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/primitives.rs","byte_start":36590,"byte_end":36612,"line_start":64,"line_end":64,"column_start":12,"column_end":34},"name":"TableFinishedWIPOffset","qualname":"::primitives::TableFinishedWIPOffset","value":"TableFinishedWIPOffset {  }","parent":null,"children":[],"decl_id":null,"docs":" TableFinishedWIPOffset marks a WIPOffset as being for a finished table.\n","sig":null,"attributes":[{"value":"/ TableFinishedWIPOffset marks a WIPOffset as being for a finished table.","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/primitives.rs","byte_start":36480,"byte_end":36555,"line_start":62,"line_end":62,"column_start":1,"column_end":76}}]},{"kind":"Struct","id":{"krate":0,"index":550},"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/primitives.rs","byte_start":36732,"byte_end":36756,"line_start":68,"line_end":68,"column_start":12,"column_end":36},"name":"TableUnfinishedWIPOffset","qualname":"::primitives::TableUnfinishedWIPOffset","value":"TableUnfinishedWIPOffset {  }","parent":null,"children":[],"decl_id":null,"docs":" TableUnfinishedWIPOffset marks a WIPOffset as being for an unfinished table.\n","sig":null,"attributes":[{"value":"/ TableUnfinishedWIPOffset marks a WIPOffset as being for an unfinished table.","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/primitives.rs","byte_start":36617,"byte_end":36697,"line_start":66,"line_end":66,"column_start":1,"column_end":81}}]},{"kind":"Struct","id":{"krate":0,"index":554},"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/primitives.rs","byte_start":36860,"byte_end":36874,"line_start":72,"line_end":72,"column_start":12,"column_end":26},"name":"UnionWIPOffset","qualname":"::primitives::UnionWIPOffset","value":"UnionWIPOffset {  }","parent":null,"children":[],"decl_id":null,"docs":" UnionWIPOffset marks a WIPOffset as being for a union value.\n","sig":null,"attributes":[{"value":"/ UnionWIPOffset marks a WIPOffset as being for a union value.","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/primitives.rs","byte_start":36761,"byte_end":36825,"line_start":70,"line_end":70,"column_start":1,"column_end":65}}]},{"kind":"Struct","id":{"krate":0,"index":558},"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/primitives.rs","byte_start":36974,"byte_end":36989,"line_start":76,"line_end":76,"column_start":12,"column_end":27},"name":"VTableWIPOffset","qualname":"::primitives::VTableWIPOffset","value":"VTableWIPOffset {  }","parent":null,"children":[],"decl_id":null,"docs":" VTableWIPOffset marks a WIPOffset as being for a vtable.\n","sig":null,"attributes":[{"value":"/ VTableWIPOffset marks a WIPOffset as being for a vtable.","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/primitives.rs","byte_start":36879,"byte_end":36939,"line_start":74,"line_end":74,"column_start":1,"column_end":61}}]},{"kind":"Struct","id":{"krate":0,"index":562},"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/primitives.rs","byte_start":37319,"byte_end":37328,"line_start":83,"line_end":83,"column_start":12,"column_end":21},"name":"WIPOffset","qualname":"::primitives::WIPOffset","value":"","parent":null,"children":[],"decl_id":null,"docs":" WIPOffset contains an UOffsetT with a special meaning: it is the location of\n data relative to the *end* of an in-progress FlatBuffer. The\n FlatBufferBuilder uses this to track the location of objects in an absolute\n way. The impl of Push converts a WIPOffset into a ForwardsUOffset.\n","sig":null,"attributes":[{"value":"/ WIPOffset contains an UOffsetT with a special meaning: it is the location of","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/primitives.rs","byte_start":36994,"byte_end":37074,"line_start":78,"line_end":78,"column_start":1,"column_end":81}},{"value":"/ data relative to the *end* of an in-progress FlatBuffer. The","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/primitives.rs","byte_start":37075,"byte_end":37139,"line_start":79,"line_end":79,"column_start":1,"column_end":65}},{"value":"/ FlatBufferBuilder uses this to track the location of objects in an absolute","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/primitives.rs","byte_start":37140,"byte_end":37219,"line_start":80,"line_end":80,"column_start":1,"column_end":80}},{"value":"/ way. The impl of Push converts a WIPOffset into a ForwardsUOffset.","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/primitives.rs","byte_start":37220,"byte_end":37290,"line_start":81,"line_end":81,"column_start":1,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":177},"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/primitives.rs","byte_start":38080,"byte_end":38083,"line_start":113,"line_end":113,"column_start":12,"column_end":15},"name":"new","qualname":"<WIPOffset<T>>::new","value":"fn (o: UOffsetT) -> WIPOffset<T>","parent":null,"children":[],"decl_id":null,"docs":" Create a new WIPOffset.\n","sig":null,"attributes":[{"value":"/ Create a new WIPOffset.","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/primitives.rs","byte_start":38027,"byte_end":38054,"line_start":111,"line_end":111,"column_start":5,"column_end":32}},{"value":"inline","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/primitives.rs","byte_start":38059,"byte_end":38068,"line_start":112,"line_end":112,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":178},"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/primitives.rs","byte_start":38337,"byte_end":38351,"line_start":123,"line_end":123,"column_start":12,"column_end":26},"name":"as_union_value","qualname":"<WIPOffset<T>>::as_union_value","value":"fn (self) -> WIPOffset<UnionWIPOffset>","parent":null,"children":[],"decl_id":null,"docs":" Return a wrapped value that brings its meaning as a union WIPOffset\n into the type system.\n","sig":null,"attributes":[{"value":"/ Return a wrapped value that brings its meaning as a union WIPOffset","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/primitives.rs","byte_start":38202,"byte_end":38273,"line_start":120,"line_end":120,"column_start":5,"column_end":76}},{"value":"/ into the type system.","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/primitives.rs","byte_start":38278,"byte_end":38303,"line_start":121,"line_end":121,"column_start":5,"column_end":30}},{"value":"inline(always)","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/primitives.rs","byte_start":38308,"byte_end":38325,"line_start":122,"line_end":122,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":179},"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/primitives.rs","byte_start":38493,"byte_end":38498,"line_start":128,"line_end":128,"column_start":12,"column_end":17},"name":"value","qualname":"<WIPOffset<T>>::value","value":"fn (self) -> UOffsetT","parent":null,"children":[],"decl_id":null,"docs":" Get the underlying value.\n","sig":null,"attributes":[{"value":"/ Get the underlying value.","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/primitives.rs","byte_start":38430,"byte_end":38459,"line_start":126,"line_end":126,"column_start":5,"column_end":34}},{"value":"inline(always)","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/primitives.rs","byte_start":38464,"byte_end":38481,"line_start":127,"line_end":127,"column_start":5,"column_end":22}}]},{"kind":"Struct","id":{"krate":0,"index":570},"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/primitives.rs","byte_start":39162,"byte_end":39177,"line_start":155,"line_end":155,"column_start":12,"column_end":27},"name":"ForwardsUOffset","qualname":"::primitives::ForwardsUOffset","value":"","parent":null,"children":[],"decl_id":null,"docs":" ForwardsUOffset is used by Follow to traverse a FlatBuffer: the pointer\n is incremented by the value contained in this type.\n","sig":null,"attributes":[{"value":"/ ForwardsUOffset is used by Follow to traverse a FlatBuffer: the pointer","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/primitives.rs","byte_start":39002,"byte_end":39077,"line_start":152,"line_end":152,"column_start":1,"column_end":76}},{"value":"/ is incremented by the value contained in this type.","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/primitives.rs","byte_start":39078,"byte_end":39133,"line_start":153,"line_end":153,"column_start":1,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":195},"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/primitives.rs","byte_start":39662,"byte_end":39667,"line_start":171,"line_end":171,"column_start":12,"column_end":17},"name":"value","qualname":"<ForwardsUOffset<T>>::value","value":"fn (self) -> UOffsetT","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/primitives.rs","byte_start":39633,"byte_end":39650,"line_start":170,"line_end":170,"column_start":5,"column_end":22}}]},{"kind":"Struct","id":{"krate":0,"index":578},"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/primitives.rs","byte_start":40187,"byte_end":40202,"line_start":189,"line_end":189,"column_start":12,"column_end":27},"name":"ForwardsVOffset","qualname":"::primitives::ForwardsVOffset","value":"","parent":null,"children":[],"decl_id":null,"docs":" ForwardsVOffset is used by Follow to traverse a FlatBuffer: the pointer\n is incremented by the value contained in this type.\n","sig":null,"attributes":[{"value":"/ ForwardsVOffset is used by Follow to traverse a FlatBuffer: the pointer","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/primitives.rs","byte_start":40027,"byte_end":40102,"line_start":186,"line_end":186,"column_start":1,"column_end":76}},{"value":"/ is incremented by the value contained in this type.","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/primitives.rs","byte_start":40103,"byte_end":40158,"line_start":187,"line_end":187,"column_start":1,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":203},"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/primitives.rs","byte_start":40295,"byte_end":40300,"line_start":192,"line_end":192,"column_start":12,"column_end":17},"name":"value","qualname":"<ForwardsVOffset<T>>::value","value":"fn (&self) -> VOffsetT","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/primitives.rs","byte_start":40266,"byte_end":40283,"line_start":191,"line_end":191,"column_start":5,"column_end":22}}]},{"kind":"Struct","id":{"krate":0,"index":586},"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/primitives.rs","byte_start":41018,"byte_end":41034,"line_start":219,"line_end":219,"column_start":12,"column_end":28},"name":"BackwardsSOffset","qualname":"::primitives::BackwardsSOffset","value":"","parent":null,"children":[],"decl_id":null,"docs":" ForwardsSOffset is used by Follow to traverse a FlatBuffer: the pointer\n is incremented by the *negative* of the value contained in this type.\n","sig":null,"attributes":[{"value":"/ ForwardsSOffset is used by Follow to traverse a FlatBuffer: the pointer","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/primitives.rs","byte_start":40840,"byte_end":40915,"line_start":216,"line_end":216,"column_start":1,"column_end":76}},{"value":"/ is incremented by the *negative* of the value contained in this type.","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/primitives.rs","byte_start":40916,"byte_end":40989,"line_start":217,"line_end":217,"column_start":1,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":215},"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/primitives.rs","byte_start":41128,"byte_end":41133,"line_start":222,"line_end":222,"column_start":12,"column_end":17},"name":"value","qualname":"<BackwardsSOffset<T>>::value","value":"fn (&self) -> SOffsetT","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/primitives.rs","byte_start":41099,"byte_end":41116,"line_start":221,"line_end":221,"column_start":5,"column_end":22}}]},{"kind":"Struct","id":{"krate":0,"index":225},"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/primitives.rs","byte_start":41859,"byte_end":41873,"line_start":248,"line_end":248,"column_start":12,"column_end":26},"name":"SkipSizePrefix","qualname":"::primitives::SkipSizePrefix","value":"","parent":null,"children":[],"decl_id":null,"docs":" SkipSizePrefix is used by Follow to traverse a FlatBuffer: the pointer is\n incremented by a fixed constant in order to skip over the size prefix value.\n","sig":null,"attributes":[{"value":"/ SkipSizePrefix is used by Follow to traverse a FlatBuffer: the pointer is","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/primitives.rs","byte_start":41689,"byte_end":41766,"line_start":246,"line_end":246,"column_start":1,"column_end":78}},{"value":"/ incremented by a fixed constant in order to skip over the size prefix value.","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/primitives.rs","byte_start":41767,"byte_end":41847,"line_start":247,"line_end":247,"column_start":1,"column_end":81}}]},{"kind":"Struct","id":{"krate":0,"index":234},"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/primitives.rs","byte_start":42290,"byte_end":42304,"line_start":259,"line_end":259,"column_start":12,"column_end":26},"name":"SkipRootOffset","qualname":"::primitives::SkipRootOffset","value":"","parent":null,"children":[],"decl_id":null,"docs":" SkipRootOffset is used by Follow to traverse a FlatBuffer: the pointer is\n incremented by a fixed constant in order to skip over the root offset value.\n","sig":null,"attributes":[{"value":"/ SkipRootOffset is used by Follow to traverse a FlatBuffer: the pointer is","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/primitives.rs","byte_start":42120,"byte_end":42197,"line_start":257,"line_end":257,"column_start":1,"column_end":78}},{"value":"/ incremented by a fixed constant in order to skip over the root offset value.","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/primitives.rs","byte_start":42198,"byte_end":42278,"line_start":258,"line_end":258,"column_start":1,"column_end":81}}]},{"kind":"Struct","id":{"krate":0,"index":243},"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/primitives.rs","byte_start":42715,"byte_end":42729,"line_start":270,"line_end":270,"column_start":12,"column_end":26},"name":"FileIdentifier","qualname":"::primitives::FileIdentifier","value":"","parent":null,"children":[],"decl_id":null,"docs":" FileIdentifier is used by Follow to traverse a FlatBuffer: the pointer is\n dereferenced into a byte slice, whose bytes are the file identifer value.\n","sig":null,"attributes":[{"value":"/ FileIdentifier is used by Follow to traverse a FlatBuffer: the pointer is","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/primitives.rs","byte_start":42548,"byte_end":42625,"line_start":268,"line_end":268,"column_start":1,"column_end":78}},{"value":"/ dereferenced into a byte slice, whose bytes are the file identifer value.","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/primitives.rs","byte_start":42626,"byte_end":42703,"line_start":269,"line_end":269,"column_start":1,"column_end":78}}]},{"kind":"Struct","id":{"krate":0,"index":249},"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/primitives.rs","byte_start":43118,"byte_end":43136,"line_start":282,"line_end":282,"column_start":12,"column_end":30},"name":"SkipFileIdentifier","qualname":"::primitives::SkipFileIdentifier","value":"","parent":null,"children":[],"decl_id":null,"docs":" SkipFileIdentifier is used by Follow to traverse a FlatBuffer: the pointer\n is incremented by a fixed constant in order to skip over the file\n identifier value.\n","sig":null,"attributes":[{"value":"/ SkipFileIdentifier is used by Follow to traverse a FlatBuffer: the pointer","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/primitives.rs","byte_start":42936,"byte_end":43014,"line_start":279,"line_end":279,"column_start":1,"column_end":79}},{"value":"/ is incremented by a fixed constant in order to skip over the file","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/primitives.rs","byte_start":43015,"byte_end":43084,"line_start":280,"line_end":280,"column_start":1,"column_end":70}},{"value":"/ identifier value.","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/primitives.rs","byte_start":43085,"byte_end":43106,"line_start":281,"line_end":281,"column_start":1,"column_end":22}}]},{"kind":"Trait","id":{"krate":0,"index":269},"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/push.rs","byte_start":45363,"byte_end":45367,"line_start":25,"line_end":25,"column_start":11,"column_end":15},"name":"Push","qualname":"::push::Push","value":"Push: Sized","parent":null,"children":[{"krate":0,"index":270},{"krate":0,"index":271},{"krate":0,"index":272},{"krate":0,"index":273}],"decl_id":null,"docs":" Trait to abstract over functionality needed to write values (either owned\n or referenced). Used in FlatBufferBuilder and implemented for generated\n types.\n","sig":null,"attributes":[{"value":"/ Trait to abstract over functionality needed to write values (either owned","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/push.rs","byte_start":45188,"byte_end":45265,"line_start":22,"line_end":22,"column_start":1,"column_end":78}},{"value":"/ or referenced). Used in FlatBufferBuilder and implemented for generated","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/push.rs","byte_start":45266,"byte_end":45341,"line_start":23,"line_end":23,"column_start":1,"column_end":76}},{"value":"/ types.","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/push.rs","byte_start":45342,"byte_end":45352,"line_start":24,"line_end":24,"column_start":1,"column_end":11}}]},{"kind":"Type","id":{"krate":0,"index":270},"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/push.rs","byte_start":45386,"byte_end":45392,"line_start":26,"line_end":26,"column_start":10,"column_end":16},"name":"Output","qualname":"::push::Push::Output","value":"type Output;","parent":{"krate":0,"index":269},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":271},"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/push.rs","byte_start":45401,"byte_end":45405,"line_start":27,"line_end":27,"column_start":8,"column_end":12},"name":"push","qualname":"::push::Push::push","value":"fn (&self, dst: &mut [u8], _rest: &[u8]) -> ()","parent":{"krate":0,"index":269},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":272},"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/push.rs","byte_start":45465,"byte_end":45469,"line_start":29,"line_end":29,"column_start":8,"column_end":12},"name":"size","qualname":"::push::Push::size","value":"fn () -> usize","parent":{"krate":0,"index":269},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/push.rs","byte_start":45448,"byte_end":45457,"line_start":28,"line_end":28,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":273},"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/push.rs","byte_start":45544,"byte_end":45553,"line_start":33,"line_end":33,"column_start":8,"column_end":17},"name":"alignment","qualname":"::push::Push::alignment","value":"fn () -> PushAlignment","parent":{"krate":0,"index":269},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/push.rs","byte_start":45527,"byte_end":45536,"line_start":32,"line_end":32,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":274},"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/push.rs","byte_start":45793,"byte_end":45806,"line_start":40,"line_end":40,"column_start":12,"column_end":25},"name":"PushAlignment","qualname":"::push::PushAlignment","value":"","parent":null,"children":[],"decl_id":null,"docs":" Ensure Push alignment calculations are typesafe (because this helps reduce\n implementation issues when using FlatBufferBuilder::align).\n","sig":null,"attributes":[{"value":"/ Ensure Push alignment calculations are typesafe (because this helps reduce","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/push.rs","byte_start":45639,"byte_end":45717,"line_start":38,"line_end":38,"column_start":1,"column_end":79}},{"value":"/ implementation issues when using FlatBufferBuilder::align).","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/push.rs","byte_start":45718,"byte_end":45781,"line_start":39,"line_end":39,"column_start":1,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":278},"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/push.rs","byte_start":45861,"byte_end":45864,"line_start":43,"line_end":43,"column_start":12,"column_end":15},"name":"new","qualname":"<PushAlignment>::new","value":"fn (x: usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/push.rs","byte_start":45840,"byte_end":45849,"line_start":42,"line_end":42,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":279},"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/push.rs","byte_start":45947,"byte_end":45952,"line_start":47,"line_end":47,"column_start":12,"column_end":17},"name":"value","qualname":"<PushAlignment>::value","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/push.rs","byte_start":45926,"byte_end":45935,"line_start":46,"line_end":46,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":280},"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/push.rs","byte_start":46017,"byte_end":46023,"line_start":51,"line_end":51,"column_start":12,"column_end":18},"name":"max_of","qualname":"<PushAlignment>::max_of","value":"fn (&self, o: usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/push.rs","byte_start":45996,"byte_end":46005,"line_start":50,"line_end":50,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":667},"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/table.rs","byte_start":47559,"byte_end":47564,"line_start":22,"line_end":22,"column_start":12,"column_end":17},"name":"Table","qualname":"::table::Table","value":"Table { buf, loc }","parent":null,"children":[{"krate":0,"index":669},{"krate":0,"index":670}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":669},"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/table.rs","byte_start":47579,"byte_end":47582,"line_start":23,"line_end":23,"column_start":9,"column_end":12},"name":"buf","qualname":"::table::Table::buf","value":"&'a [u8]","parent":{"krate":0,"index":667},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":670},"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/table.rs","byte_start":47602,"byte_end":47605,"line_start":24,"line_end":24,"column_start":9,"column_end":12},"name":"loc","qualname":"::table::Table::loc","value":"usize","parent":{"krate":0,"index":667},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":288},"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/table.rs","byte_start":47663,"byte_end":47666,"line_start":29,"line_end":29,"column_start":12,"column_end":15},"name":"new","qualname":"<Table>::new","value":"fn (buf: &'a [u8], loc: usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/table.rs","byte_start":47642,"byte_end":47651,"line_start":28,"line_end":28,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":289},"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/table.rs","byte_start":47762,"byte_end":47768,"line_start":33,"line_end":33,"column_start":12,"column_end":18},"name":"vtable","qualname":"<Table>::vtable","value":"fn (&self) -> VTable<'a>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/table.rs","byte_start":47741,"byte_end":47750,"line_start":32,"line_end":32,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":290},"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/table.rs","byte_start":47890,"byte_end":47893,"line_start":37,"line_end":37,"column_start":12,"column_end":15},"name":"get","qualname":"<Table>::get","value":"fn <T> (&self, slot_byte_loc: VOffsetT, default: Option<T::Inner>) -> Option<T::Inner>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/table.rs","byte_start":47869,"byte_end":47878,"line_start":36,"line_end":36,"column_start":5,"column_end":14}}]},{"kind":"Function","id":{"krate":0,"index":296},"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/table.rs","byte_start":48391,"byte_end":48399,"line_start":59,"line_end":59,"column_start":8,"column_end":16},"name":"get_root","qualname":"::table::get_root","value":"fn <'a, T> (data: &'a [u8]) -> T::Inner","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/table.rs","byte_start":48374,"byte_end":48383,"line_start":58,"line_end":58,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":299},"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/table.rs","byte_start":48515,"byte_end":48537,"line_start":63,"line_end":63,"column_start":8,"column_end":30},"name":"get_size_prefixed_root","qualname":"::table::get_size_prefixed_root","value":"fn <'a, T> (data: &'a [u8]) -> T::Inner","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/table.rs","byte_start":48498,"byte_end":48507,"line_start":62,"line_end":62,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":302},"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/table.rs","byte_start":48669,"byte_end":48690,"line_start":67,"line_end":67,"column_start":8,"column_end":29},"name":"buffer_has_identifier","qualname":"::table::buffer_has_identifier","value":"fn (data: &[u8], ident: &str, size_prefixed: bool) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/table.rs","byte_start":48652,"byte_end":48661,"line_start":66,"line_end":66,"column_start":1,"column_end":10}}]},{"kind":"Struct","id":{"krate":0,"index":685},"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/vector.rs","byte_start":49998,"byte_end":50004,"line_start":30,"line_end":30,"column_start":12,"column_end":18},"name":"Vector","qualname":"::vector::Vector","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":326},"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/vector.rs","byte_start":50456,"byte_end":50459,"line_start":44,"line_end":44,"column_start":12,"column_end":15},"name":"new","qualname":"<Vector>::new","value":"fn (buf: &'a [u8], loc: usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/vector.rs","byte_start":50427,"byte_end":50444,"line_start":43,"line_end":43,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":327},"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/vector.rs","byte_start":50632,"byte_end":50635,"line_start":53,"line_end":53,"column_start":12,"column_end":15},"name":"len","qualname":"<Vector>::len","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/vector.rs","byte_start":50603,"byte_end":50620,"line_start":52,"line_end":52,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":328},"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/vector.rs","byte_start":50754,"byte_end":50762,"line_start":57,"line_end":57,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<Vector>::is_empty","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/vector.rs","byte_start":50725,"byte_end":50742,"line_start":56,"line_end":56,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":332},"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/vector.rs","byte_start":50891,"byte_end":50894,"line_start":64,"line_end":64,"column_start":12,"column_end":15},"name":"get","qualname":"<Vector>::get","value":"fn (&self, idx: usize) -> T::Inner","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/vector.rs","byte_start":50862,"byte_end":50879,"line_start":63,"line_end":63,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":333},"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/vector.rs","byte_start":51179,"byte_end":51183,"line_start":72,"line_end":72,"column_start":12,"column_end":16},"name":"iter","qualname":"<Vector>::iter","value":"fn (&self) -> VectorIter<'a, T>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/vector.rs","byte_start":51150,"byte_end":51167,"line_start":71,"line_end":71,"column_start":5,"column_end":22}}]},{"kind":"Trait","id":{"krate":0,"index":334},"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/vector.rs","byte_start":51264,"byte_end":51279,"line_start":77,"line_end":77,"column_start":11,"column_end":26},"name":"SafeSliceAccess","qualname":"::vector::SafeSliceAccess","value":"SafeSliceAccess","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":338},"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/vector.rs","byte_start":51344,"byte_end":51354,"line_start":79,"line_end":79,"column_start":12,"column_end":22},"name":"safe_slice","qualname":"<Vector>::safe_slice","value":"fn (self) -> &'a [T]","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":352},"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/vector.rs","byte_start":52349,"byte_end":52364,"line_start":113,"line_end":113,"column_start":8,"column_end":23},"name":"follow_cast_ref","qualname":"::vector::follow_cast_ref","value":"fn <'a, T> (buf: &'a [u8], loc: usize) -> &'a T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":696},"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/vector.rs","byte_start":53836,"byte_end":53846,"line_start":158,"line_end":158,"column_start":12,"column_end":22},"name":"VectorIter","qualname":"::vector::VectorIter","value":"VectorIter {  }","parent":null,"children":[{"krate":0,"index":699},{"krate":0,"index":700},{"krate":0,"index":701},{"krate":0,"index":702}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":374},"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/vector.rs","byte_start":54010,"byte_end":54013,"line_start":167,"line_end":167,"column_start":12,"column_end":15},"name":"new","qualname":"<VectorIter>::new","value":"fn (inner: Vector<'a, T>) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/vector.rs","byte_start":53989,"byte_end":53998,"line_start":166,"line_end":166,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":707},"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/vtable.rs","byte_start":57659,"byte_end":57665,"line_start":24,"line_end":24,"column_start":12,"column_end":18},"name":"VTable","qualname":"::vtable::VTable","value":"VTable {  }","parent":null,"children":[{"krate":0,"index":709},{"krate":0,"index":710}],"decl_id":null,"docs":" VTable encapsulates read-only usage of a vtable. It is only to be used\n by generated code.\n","sig":null,"attributes":[{"value":"/ VTable encapsulates read-only usage of a vtable. It is only to be used","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/vtable.rs","byte_start":57533,"byte_end":57607,"line_start":21,"line_end":21,"column_start":1,"column_end":75}},{"value":"/ by generated code.","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/vtable.rs","byte_start":57608,"byte_end":57630,"line_start":22,"line_end":22,"column_start":1,"column_end":23}}]},{"kind":"Method","id":{"krate":0,"index":420},"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/vtable.rs","byte_start":57876,"byte_end":57880,"line_start":36,"line_end":36,"column_start":12,"column_end":16},"name":"init","qualname":"<VTable>::init","value":"fn (buf: &'a [u8], loc: usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":421},"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/vtable.rs","byte_start":57963,"byte_end":57973,"line_start":39,"line_end":39,"column_start":12,"column_end":22},"name":"num_fields","qualname":"<VTable>::num_fields","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":422},"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/vtable.rs","byte_start":58055,"byte_end":58064,"line_start":42,"line_end":42,"column_start":12,"column_end":21},"name":"num_bytes","qualname":"<VTable>::num_bytes","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":423},"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/vtable.rs","byte_start":58164,"byte_end":58187,"line_start":45,"line_end":45,"column_start":12,"column_end":35},"name":"object_inline_num_bytes","qualname":"<VTable>::object_inline_num_bytes","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":424},"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/vtable.rs","byte_start":58321,"byte_end":58330,"line_start":49,"line_end":49,"column_start":12,"column_end":21},"name":"get_field","qualname":"<VTable>::get_field","value":"fn (&self, idx: usize) -> VOffsetT","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":425},"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/vtable.rs","byte_start":58644,"byte_end":58647,"line_start":59,"line_end":59,"column_start":12,"column_end":15},"name":"get","qualname":"<VTable>::get","value":"fn (&self, byte_loc: VOffsetT) -> VOffsetT","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":426},"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/vtable.rs","byte_start":58917,"byte_end":58925,"line_start":66,"line_end":66,"column_start":12,"column_end":20},"name":"as_bytes","qualname":"<VTable>::as_bytes","value":"fn (&self) -> &[u8]","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":427},"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/vtable.rs","byte_start":59060,"byte_end":59087,"line_start":73,"line_end":73,"column_start":8,"column_end":35},"name":"field_index_to_field_offset","qualname":"::vtable::field_index_to_field_offset","value":"fn (field_id: VOffsetT) -> VOffsetT","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(dead_code)","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/vtable.rs","byte_start":59033,"byte_end":59052,"line_start":72,"line_end":72,"column_start":1,"column_end":20}}]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/builder.rs","byte_start":3783,"byte_end":3800,"line_start":59,"line_end":59,"column_start":12,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":27},{"krate":0,"index":28},{"krate":0,"index":29},{"krate":0,"index":30},{"krate":0,"index":31},{"krate":0,"index":33},{"krate":0,"index":35},{"krate":0,"index":37},{"krate":0,"index":38},{"krate":0,"index":39},{"krate":0,"index":40},{"krate":0,"index":42},{"krate":0,"index":44},{"krate":0,"index":47},{"krate":0,"index":48},{"krate":0,"index":52},{"krate":0,"index":56},{"krate":0,"index":60},{"krate":0,"index":61},{"krate":0,"index":62},{"krate":0,"index":63},{"krate":0,"index":65},{"krate":0,"index":67},{"krate":0,"index":69},{"krate":0,"index":70},{"krate":0,"index":71},{"krate":0,"index":72},{"krate":0,"index":73},{"krate":0,"index":74},{"krate":0,"index":76},{"krate":0,"index":77},{"krate":0,"index":78},{"krate":0,"index":79},{"krate":0,"index":80},{"krate":0,"index":81},{"krate":0,"index":82},{"krate":0,"index":83},{"krate":0,"index":84},{"krate":0,"index":85}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/builder.rs","byte_start":27078,"byte_end":27095,"line_start":694,"line_end":694,"column_start":24,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":91}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Inherent","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/follow.rs","byte_start":34148,"byte_end":34159,"line_start":46,"line_end":46,"column_start":30,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":125},{"krate":0,"index":126}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/follow.rs","byte_start":34407,"byte_end":34418,"line_start":56,"line_end":56,"column_start":40,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":130},{"krate":0,"index":131}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/primitives.rs","byte_start":37609,"byte_end":37618,"line_start":89,"line_end":89,"column_start":18,"column_end":27},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/primitives.rs","byte_start":37643,"byte_end":37652,"line_start":90,"line_end":90,"column_start":19,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":166}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/primitives.rs","byte_start":37755,"byte_end":37764,"line_start":97,"line_end":97,"column_start":23,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":169}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/primitives.rs","byte_start":37876,"byte_end":37885,"line_start":103,"line_end":103,"column_start":19,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":172},{"krate":0,"index":173}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Inherent","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/primitives.rs","byte_start":38008,"byte_end":38017,"line_start":110,"line_end":110,"column_start":17,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":177},{"krate":0,"index":178},{"krate":0,"index":179}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Direct","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/primitives.rs","byte_start":38560,"byte_end":38569,"line_start":133,"line_end":133,"column_start":18,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":182},{"krate":0,"index":183}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Direct","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/primitives.rs","byte_start":38837,"byte_end":38852,"line_start":143,"line_end":143,"column_start":18,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":186},{"krate":0,"index":187}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Direct","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/primitives.rs","byte_start":39464,"byte_end":39479,"line_start":161,"line_end":161,"column_start":18,"column_end":33},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Direct","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/primitives.rs","byte_start":39504,"byte_end":39519,"line_start":162,"line_end":162,"column_start":19,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":192}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Inherent","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/primitives.rs","byte_start":39608,"byte_end":39623,"line_start":169,"line_end":169,"column_start":9,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":195}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Direct","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/primitives.rs","byte_start":39751,"byte_end":39766,"line_start":176,"line_end":176,"column_start":40,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":199},{"krate":0,"index":200}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Inherent","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/primitives.rs","byte_start":40241,"byte_end":40256,"line_start":190,"line_end":190,"column_start":9,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":203}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Direct","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/primitives.rs","byte_start":40385,"byte_end":40400,"line_start":197,"line_end":197,"column_start":40,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":207},{"krate":0,"index":208}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Direct","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/primitives.rs","byte_start":40683,"byte_end":40698,"line_start":207,"line_end":207,"column_start":18,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":211},{"krate":0,"index":212}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Inherent","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/primitives.rs","byte_start":41073,"byte_end":41089,"line_start":220,"line_end":220,"column_start":9,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":215}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Direct","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/primitives.rs","byte_start":41218,"byte_end":41234,"line_start":227,"line_end":227,"column_start":40,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":219},{"krate":0,"index":220}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Direct","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/primitives.rs","byte_start":41531,"byte_end":41547,"line_start":237,"line_end":237,"column_start":18,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":223},{"krate":0,"index":224}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Direct","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/primitives.rs","byte_start":41938,"byte_end":41952,"line_start":249,"line_end":249,"column_start":45,"column_end":59},"value":"","parent":null,"children":[{"krate":0,"index":232},{"krate":0,"index":233}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Direct","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/primitives.rs","byte_start":42369,"byte_end":42383,"line_start":260,"line_end":260,"column_start":45,"column_end":59},"value":"","parent":null,"children":[{"krate":0,"index":241},{"krate":0,"index":242}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Direct","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/primitives.rs","byte_start":42755,"byte_end":42769,"line_start":271,"line_end":271,"column_start":25,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":247},{"krate":0,"index":248}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Direct","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/primitives.rs","byte_start":43201,"byte_end":43219,"line_start":283,"line_end":283,"column_start":45,"column_end":63},"value":"","parent":null,"children":[{"krate":0,"index":256},{"krate":0,"index":257}],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Inherent","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/push.rs","byte_start":45820,"byte_end":45833,"line_start":41,"line_end":41,"column_start":6,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":278},{"krate":0,"index":279},{"krate":0,"index":280}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Inherent","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/table.rs","byte_start":47626,"byte_end":47631,"line_start":27,"line_end":27,"column_start":10,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":288},{"krate":0,"index":289},{"krate":0,"index":290}],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Direct","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/table.rs","byte_start":48226,"byte_end":48231,"line_start":50,"line_end":50,"column_start":25,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":294},{"krate":0,"index":295}],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Direct","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/vector.rs","byte_start":50283,"byte_end":50289,"line_start":35,"line_end":35,"column_start":22,"column_end":28},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Direct","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/vector.rs","byte_start":50322,"byte_end":50328,"line_start":36,"line_end":36,"column_start":23,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":322}],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Inherent","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/vector.rs","byte_start":50407,"byte_end":50413,"line_start":42,"line_end":42,"column_start":17,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":326},{"krate":0,"index":327},{"krate":0,"index":328}],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Inherent","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/vector.rs","byte_start":50842,"byte_end":50848,"line_start":62,"line_end":62,"column_start":30,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":332},{"krate":0,"index":333}],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Inherent","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/vector.rs","byte_start":51317,"byte_end":51323,"line_start":78,"line_end":78,"column_start":35,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":338}],"docs":"","sig":null,"attributes":[]},{"id":47,"kind":"Direct","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/vector.rs","byte_start":53663,"byte_end":53669,"line_start":150,"line_end":150,"column_start":45,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":369},{"krate":0,"index":370}],"docs":"","sig":null,"attributes":[]},{"id":48,"kind":"Inherent","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/vector.rs","byte_start":53965,"byte_end":53975,"line_start":165,"line_end":165,"column_start":17,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":374}],"docs":"","sig":null,"attributes":[]},{"id":49,"kind":"Direct","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/vector.rs","byte_start":54453,"byte_end":54463,"line_start":180,"line_end":180,"column_start":40,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":378}],"docs":"","sig":null,"attributes":[]},{"id":50,"kind":"Direct","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/vector.rs","byte_start":54727,"byte_end":54737,"line_start":192,"line_end":192,"column_start":43,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":382},{"krate":0,"index":383},{"krate":0,"index":384},{"krate":0,"index":385}],"docs":"","sig":null,"attributes":[]},{"id":51,"kind":"Direct","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/vector.rs","byte_start":55704,"byte_end":55714,"line_start":230,"line_end":230,"column_start":54,"column_end":64},"value":"","parent":null,"children":[{"krate":0,"index":389},{"krate":0,"index":390}],"docs":"","sig":null,"attributes":[]},{"id":52,"kind":"Direct","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/vector.rs","byte_start":56257,"byte_end":56267,"line_start":251,"line_end":251,"column_start":52,"column_end":62},"value":"","parent":null,"children":[{"krate":0,"index":394}],"docs":"","sig":null,"attributes":[]},{"id":53,"kind":"Direct","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/vector.rs","byte_start":56399,"byte_end":56409,"line_start":258,"line_end":258,"column_start":48,"column_end":58},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":54,"kind":"Direct","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/vector.rs","byte_start":56467,"byte_end":56473,"line_start":260,"line_end":260,"column_start":47,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":401},{"krate":0,"index":402},{"krate":0,"index":403}],"docs":"","sig":null,"attributes":[]},{"id":55,"kind":"Direct","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/vtable.rs","byte_start":57733,"byte_end":57739,"line_start":29,"line_end":29,"column_start":24,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":417}],"docs":"","sig":null,"attributes":[]},{"id":56,"kind":"Inherent","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/vtable.rs","byte_start":57852,"byte_end":57858,"line_start":35,"line_end":35,"column_start":10,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":420},{"krate":0,"index":421},{"krate":0,"index":422},{"krate":0,"index":423},{"krate":0,"index":424},{"krate":0,"index":425},{"krate":0,"index":426}],"docs":"","sig":null,"attributes":[]},{"id":57,"kind":"Direct","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/vtable.rs","byte_start":59582,"byte_end":59588,"line_start":86,"line_end":86,"column_start":25,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":431},{"krate":0,"index":432}],"docs":"","sig":null,"attributes":[]},{"id":58,"kind":"Inherent","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/vtable_writer.rs","byte_start":60592,"byte_end":60604,"line_start":28,"line_end":28,"column_start":10,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":441},{"krate":0,"index":442},{"krate":0,"index":443},{"krate":0,"index":444},{"krate":0,"index":445},{"krate":0,"index":446}],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/builder.rs","byte_start":3783,"byte_end":3800,"line_start":59,"line_end":59,"column_start":12,"column_end":29},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":485},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/builder.rs","byte_start":27078,"byte_end":27095,"line_start":694,"line_end":694,"column_start":24,"column_end":41},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":485},"to":{"krate":2,"index":1893}},{"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/endian_scalar.rs","byte_start":28351,"byte_end":28356,"line_start":29,"line_end":29,"column_start":25,"column_end":30},"kind":"SuperTrait","from":{"krate":2,"index":1908},"to":{"krate":0,"index":94}},{"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/endian_scalar.rs","byte_start":28359,"byte_end":28368,"line_start":29,"line_end":29,"column_start":33,"column_end":42},"kind":"SuperTrait","from":{"krate":2,"index":1632},"to":{"krate":0,"index":94}},{"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/endian_scalar.rs","byte_start":28371,"byte_end":28375,"line_start":29,"line_end":29,"column_start":45,"column_end":49},"kind":"SuperTrait","from":{"krate":2,"index":1913},"to":{"krate":0,"index":94}},{"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/endian_scalar.rs","byte_start":28378,"byte_end":28383,"line_start":29,"line_end":29,"column_start":52,"column_end":57},"kind":"SuperTrait","from":{"krate":2,"index":1604},"to":{"krate":0,"index":94}},{"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/follow.rs","byte_start":34148,"byte_end":34159,"line_start":46,"line_end":46,"column_start":30,"column_end":41},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":539},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/follow.rs","byte_start":34407,"byte_end":34418,"line_start":56,"line_end":56,"column_start":40,"column_end":51},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":539},"to":{"krate":0,"index":115}},{"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/primitives.rs","byte_start":37609,"byte_end":37618,"line_start":89,"line_end":89,"column_start":18,"column_end":27},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":562},"to":{"krate":2,"index":1913}},{"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/primitives.rs","byte_start":37643,"byte_end":37652,"line_start":90,"line_end":90,"column_start":19,"column_end":28},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":562},"to":{"krate":2,"index":1604}},{"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/primitives.rs","byte_start":37755,"byte_end":37764,"line_start":97,"line_end":97,"column_start":23,"column_end":32},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":562},"to":{"krate":2,"index":1632}},{"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/primitives.rs","byte_start":37876,"byte_end":37885,"line_start":103,"line_end":103,"column_start":19,"column_end":28},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":562},"to":{"krate":2,"index":2074}},{"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/primitives.rs","byte_start":38008,"byte_end":38017,"line_start":110,"line_end":110,"column_start":17,"column_end":26},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":562},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/primitives.rs","byte_start":38560,"byte_end":38569,"line_start":133,"line_end":133,"column_start":18,"column_end":27},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":562},"to":{"krate":0,"index":269}},{"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/primitives.rs","byte_start":38837,"byte_end":38852,"line_start":143,"line_end":143,"column_start":18,"column_end":33},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":570},"to":{"krate":0,"index":269}},{"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/primitives.rs","byte_start":39464,"byte_end":39479,"line_start":161,"line_end":161,"column_start":18,"column_end":33},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":570},"to":{"krate":2,"index":1913}},{"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/primitives.rs","byte_start":39504,"byte_end":39519,"line_start":162,"line_end":162,"column_start":19,"column_end":34},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":570},"to":{"krate":2,"index":1604}},{"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/primitives.rs","byte_start":39608,"byte_end":39623,"line_start":169,"line_end":169,"column_start":9,"column_end":24},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":570},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/primitives.rs","byte_start":39751,"byte_end":39766,"line_start":176,"line_end":176,"column_start":40,"column_end":55},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":570},"to":{"krate":0,"index":115}},{"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/primitives.rs","byte_start":40241,"byte_end":40256,"line_start":190,"line_end":190,"column_start":9,"column_end":24},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":578},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/primitives.rs","byte_start":40385,"byte_end":40400,"line_start":197,"line_end":197,"column_start":40,"column_end":55},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":578},"to":{"krate":0,"index":115}},{"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/primitives.rs","byte_start":40683,"byte_end":40698,"line_start":207,"line_end":207,"column_start":18,"column_end":33},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":578},"to":{"krate":0,"index":269}},{"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/primitives.rs","byte_start":41073,"byte_end":41089,"line_start":220,"line_end":220,"column_start":9,"column_end":25},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":586},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/primitives.rs","byte_start":41218,"byte_end":41234,"line_start":227,"line_end":227,"column_start":40,"column_end":56},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":586},"to":{"krate":0,"index":115}},{"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/primitives.rs","byte_start":41531,"byte_end":41547,"line_start":237,"line_end":237,"column_start":18,"column_end":34},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":586},"to":{"krate":0,"index":269}},{"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/primitives.rs","byte_start":41938,"byte_end":41952,"line_start":249,"line_end":249,"column_start":45,"column_end":59},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":225},"to":{"krate":0,"index":115}},{"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/primitives.rs","byte_start":42369,"byte_end":42383,"line_start":260,"line_end":260,"column_start":45,"column_end":59},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":234},"to":{"krate":0,"index":115}},{"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/primitives.rs","byte_start":42755,"byte_end":42769,"line_start":271,"line_end":271,"column_start":25,"column_end":39},"kind":{"Impl":{"id":25}},"from":{"krate":0,"index":243},"to":{"krate":0,"index":115}},{"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/primitives.rs","byte_start":43201,"byte_end":43219,"line_start":283,"line_end":283,"column_start":45,"column_end":63},"kind":{"Impl":{"id":26}},"from":{"krate":0,"index":249},"to":{"krate":0,"index":115}},{"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/push.rs","byte_start":45369,"byte_end":45374,"line_start":25,"line_end":25,"column_start":17,"column_end":22},"kind":"SuperTrait","from":{"krate":2,"index":1908},"to":{"krate":0,"index":269}},{"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/push.rs","byte_start":45820,"byte_end":45833,"line_start":41,"line_end":41,"column_start":6,"column_end":19},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":274},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/table.rs","byte_start":47626,"byte_end":47631,"line_start":27,"line_end":27,"column_start":10,"column_end":15},"kind":{"Impl":{"id":29}},"from":{"krate":0,"index":667},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/table.rs","byte_start":48226,"byte_end":48231,"line_start":50,"line_end":50,"column_start":25,"column_end":30},"kind":{"Impl":{"id":30}},"from":{"krate":0,"index":667},"to":{"krate":0,"index":115}},{"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/vector.rs","byte_start":50283,"byte_end":50289,"line_start":35,"line_end":35,"column_start":22,"column_end":28},"kind":{"Impl":{"id":31}},"from":{"krate":0,"index":685},"to":{"krate":2,"index":1913}},{"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/vector.rs","byte_start":50322,"byte_end":50328,"line_start":36,"line_end":36,"column_start":23,"column_end":29},"kind":{"Impl":{"id":32}},"from":{"krate":0,"index":685},"to":{"krate":2,"index":1604}},{"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/vector.rs","byte_start":50407,"byte_end":50413,"line_start":42,"line_end":42,"column_start":17,"column_end":23},"kind":{"Impl":{"id":33}},"from":{"krate":0,"index":685},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/vector.rs","byte_start":50842,"byte_end":50848,"line_start":62,"line_end":62,"column_start":30,"column_end":36},"kind":{"Impl":{"id":34}},"from":{"krate":0,"index":685},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/vector.rs","byte_start":51317,"byte_end":51323,"line_start":78,"line_end":78,"column_start":35,"column_end":41},"kind":{"Impl":{"id":35}},"from":{"krate":0,"index":685},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/vector.rs","byte_start":53663,"byte_end":53669,"line_start":150,"line_end":150,"column_start":45,"column_end":51},"kind":{"Impl":{"id":47}},"from":{"krate":0,"index":685},"to":{"krate":0,"index":115}},{"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/vector.rs","byte_start":53965,"byte_end":53975,"line_start":165,"line_end":165,"column_start":17,"column_end":27},"kind":{"Impl":{"id":48}},"from":{"krate":0,"index":696},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/vector.rs","byte_start":54453,"byte_end":54463,"line_start":180,"line_end":180,"column_start":40,"column_end":50},"kind":{"Impl":{"id":49}},"from":{"krate":0,"index":696},"to":{"krate":2,"index":1604}},{"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/vector.rs","byte_start":54727,"byte_end":54737,"line_start":192,"line_end":192,"column_start":43,"column_end":53},"kind":{"Impl":{"id":50}},"from":{"krate":0,"index":696},"to":{"krate":2,"index":4965}},{"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/vector.rs","byte_start":55704,"byte_end":55714,"line_start":230,"line_end":230,"column_start":54,"column_end":64},"kind":{"Impl":{"id":51}},"from":{"krate":0,"index":696},"to":{"krate":2,"index":4897}},{"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/vector.rs","byte_start":56257,"byte_end":56267,"line_start":251,"line_end":251,"column_start":52,"column_end":62},"kind":{"Impl":{"id":52}},"from":{"krate":0,"index":696},"to":{"krate":2,"index":4920}},{"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/vector.rs","byte_start":56399,"byte_end":56409,"line_start":258,"line_end":258,"column_start":48,"column_end":58},"kind":{"Impl":{"id":53}},"from":{"krate":0,"index":696},"to":{"krate":2,"index":5221}},{"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/vector.rs","byte_start":56467,"byte_end":56473,"line_start":260,"line_end":260,"column_start":47,"column_end":53},"kind":{"Impl":{"id":54}},"from":{"krate":0,"index":685},"to":{"krate":2,"index":4875}},{"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/vtable.rs","byte_start":57733,"byte_end":57739,"line_start":29,"line_end":29,"column_start":24,"column_end":30},"kind":{"Impl":{"id":55}},"from":{"krate":0,"index":707},"to":{"krate":2,"index":1632}},{"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/vtable.rs","byte_start":57852,"byte_end":57858,"line_start":35,"line_end":35,"column_start":10,"column_end":16},"kind":{"Impl":{"id":56}},"from":{"krate":0,"index":707},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/vtable.rs","byte_start":59582,"byte_end":59588,"line_start":86,"line_end":86,"column_start":25,"column_end":31},"kind":{"Impl":{"id":57}},"from":{"krate":0,"index":707},"to":{"krate":0,"index":115}},{"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/flatbuffers-0.6.1/src/vtable_writer.rs","byte_start":60592,"byte_end":60604,"line_start":28,"line_end":28,"column_start":10,"column_end":22},"kind":{"Impl":{"id":58}},"from":{"krate":0,"index":714},"to":{"krate":4294967295,"index":4294967295}}]}