// automatically generated by the FlatBuffers compiler, do not modify



use crate::Player_generated::*;
use std::mem;
use std::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::EndianScalar;

#[allow(non_camel_case_types)]
#[repr(i8)]
#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Debug)]
pub enum Status {
  OkNew = 0,
  OkLogin = 1,
  Denied = 2,
  Failure = 3,

}

pub const ENUM_MIN_STATUS: i8 = 0;
pub const ENUM_MAX_STATUS: i8 = 3;

impl<'a> flatbuffers::Follow<'a> for Status {
  type Inner = Self;
  #[inline]
  fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    flatbuffers::read_scalar_at::<Self>(buf, loc)
  }
}

impl flatbuffers::EndianScalar for Status {
  #[inline]
  fn to_little_endian(self) -> Self {
    let n = i8::to_le(self as i8);
    let p = &n as *const i8 as *const Status;
    unsafe { *p }
  }
  #[inline]
  fn from_little_endian(self) -> Self {
    let n = i8::from_le(self as i8);
    let p = &n as *const i8 as *const Status;
    unsafe { *p }
  }
}

impl flatbuffers::Push for Status {
    type Output = Status;
    #[inline]
    fn push(&self, dst: &mut [u8], _rest: &[u8]) {
        flatbuffers::emplace_scalar::<Status>(dst, *self);
    }
}

#[allow(non_camel_case_types)]
pub const ENUM_VALUES_STATUS:[Status; 4] = [
  Status::OkNew,
  Status::OkLogin,
  Status::Denied,
  Status::Failure
];

#[allow(non_camel_case_types)]
pub const ENUM_NAMES_STATUS:[&'static str; 4] = [
    "OkNew",
    "OkLogin",
    "Denied",
    "Failure"
];

pub fn enum_name_status(e: Status) -> &'static str {
  let index = e as i8;
  ENUM_NAMES_STATUS[index as usize]
}

pub enum RecivePlayerOffset {}
#[derive(Copy, Clone, Debug, PartialEq)]

pub struct RecivePlayer<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for RecivePlayer<'a> {
    type Inner = RecivePlayer<'a>;
    #[inline]
    fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
        Self {
            _tab: flatbuffers::Table { buf: buf, loc: loc },
        }
    }
}

impl<'a> RecivePlayer<'a> {
    #[inline]
    pub fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
        RecivePlayer {
            _tab: table,
        }
    }
    #[allow(unused_mut)]
    pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
        _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
        args: &'args RecivePlayerArgs<'args>) -> flatbuffers::WIPOffset<RecivePlayer<'bldr>> {
      let mut builder = RecivePlayerBuilder::new(_fbb);
      if let Some(x) = args.player { builder.add_player(x); }
      builder.add_status(args.status);
      builder.finish()
    }

    pub const VT_STATUS: flatbuffers::VOffsetT = 4;
    pub const VT_PLAYER: flatbuffers::VOffsetT = 6;

  #[inline]
  pub fn status(&self) -> Status {
    self._tab.get::<Status>(RecivePlayer::VT_STATUS, Some(Status::OkNew)).unwrap()
  }
  #[inline]
  pub fn player(&self) -> Option<Player<'a>> {
    self._tab.get::<flatbuffers::ForwardsUOffset<Player<'a>>>(RecivePlayer::VT_PLAYER, None)
  }
}

pub struct RecivePlayerArgs<'a> {
    pub status: Status,
    pub player: Option<flatbuffers::WIPOffset<Player<'a >>>,
}
impl<'a> Default for RecivePlayerArgs<'a> {
    #[inline]
    fn default() -> Self {
        RecivePlayerArgs {
            status: Status::OkNew,
            player: None,
        }
    }
}
pub struct RecivePlayerBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> RecivePlayerBuilder<'a, 'b> {
  #[inline]
  pub fn add_status(&mut self, status: Status) {
    self.fbb_.push_slot::<Status>(RecivePlayer::VT_STATUS, status, Status::OkNew);
  }
  #[inline]
  pub fn add_player(&mut self, player: flatbuffers::WIPOffset<Player<'b >>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<Player>>(RecivePlayer::VT_PLAYER, player);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> RecivePlayerBuilder<'a, 'b> {
    let start = _fbb.start_table();
    RecivePlayerBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<RecivePlayer<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

#[inline]
pub fn get_root_as_recive_player<'a>(buf: &'a [u8]) -> RecivePlayer<'a> {
  flatbuffers::get_root::<RecivePlayer<'a>>(buf)
}

#[inline]
pub fn get_size_prefixed_root_as_recive_player<'a>(buf: &'a [u8]) -> RecivePlayer<'a> {
  flatbuffers::get_size_prefixed_root::<RecivePlayer<'a>>(buf)
}

#[inline]
pub fn finish_recive_player_buffer<'a, 'b>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>,
    root: flatbuffers::WIPOffset<RecivePlayer<'a>>) {
  fbb.finish(root, None);
}

#[inline]
pub fn finish_size_prefixed_recive_player_buffer<'a, 'b>(fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>, root: flatbuffers::WIPOffset<RecivePlayer<'a>>) {
  fbb.finish_size_prefixed(root, None);
}
