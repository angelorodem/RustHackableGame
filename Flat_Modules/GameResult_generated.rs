// automatically generated by the FlatBuffers compiler, do not modify



use std::mem;
use std::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::EndianScalar;

pub enum GameResultOffset {}
#[derive(Copy, Clone, Debug, PartialEq)]

pub struct GameResult<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for GameResult<'a> {
    type Inner = GameResult<'a>;
    #[inline]
    fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
        Self {
            _tab: flatbuffers::Table { buf: buf, loc: loc },
        }
    }
}

impl<'a> GameResult<'a> {
    #[inline]
    pub fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
        GameResult {
            _tab: table,
        }
    }
    #[allow(unused_mut)]
    pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
        _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
        args: &'args GameResultArgs) -> flatbuffers::WIPOffset<GameResult<'bldr>> {
      let mut builder = GameResultBuilder::new(_fbb);
      builder.add_score(args.score);
      builder.add_misses(args.misses);
      builder.add_specials(args.specials);
      builder.add_hits(args.hits);
      builder.finish()
    }

    pub const VT_HITS: flatbuffers::VOffsetT = 4;
    pub const VT_SPECIALS: flatbuffers::VOffsetT = 6;
    pub const VT_MISSES: flatbuffers::VOffsetT = 8;
    pub const VT_SCORE: flatbuffers::VOffsetT = 10;

  #[inline]
  pub fn hits(&self) -> u32 {
    self._tab.get::<u32>(GameResult::VT_HITS, Some(0)).unwrap()
  }
  #[inline]
  pub fn specials(&self) -> u32 {
    self._tab.get::<u32>(GameResult::VT_SPECIALS, Some(0)).unwrap()
  }
  #[inline]
  pub fn misses(&self) -> u32 {
    self._tab.get::<u32>(GameResult::VT_MISSES, Some(0)).unwrap()
  }
  #[inline]
  pub fn score(&self) -> i32 {
    self._tab.get::<i32>(GameResult::VT_SCORE, Some(0)).unwrap()
  }
}

pub struct GameResultArgs {
    pub hits: u32,
    pub specials: u32,
    pub misses: u32,
    pub score: i32,
}
impl<'a> Default for GameResultArgs {
    #[inline]
    fn default() -> Self {
        GameResultArgs {
            hits: 0,
            specials: 0,
            misses: 0,
            score: 0,
        }
    }
}
pub struct GameResultBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> GameResultBuilder<'a, 'b> {
  #[inline]
  pub fn add_hits(&mut self, hits: u32) {
    self.fbb_.push_slot::<u32>(GameResult::VT_HITS, hits, 0);
  }
  #[inline]
  pub fn add_specials(&mut self, specials: u32) {
    self.fbb_.push_slot::<u32>(GameResult::VT_SPECIALS, specials, 0);
  }
  #[inline]
  pub fn add_misses(&mut self, misses: u32) {
    self.fbb_.push_slot::<u32>(GameResult::VT_MISSES, misses, 0);
  }
  #[inline]
  pub fn add_score(&mut self, score: i32) {
    self.fbb_.push_slot::<i32>(GameResult::VT_SCORE, score, 0);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> GameResultBuilder<'a, 'b> {
    let start = _fbb.start_table();
    GameResultBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<GameResult<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

#[inline]
pub fn get_root_as_game_result<'a>(buf: &'a [u8]) -> GameResult<'a> {
  flatbuffers::get_root::<GameResult<'a>>(buf)
}

#[inline]
pub fn get_size_prefixed_root_as_game_result<'a>(buf: &'a [u8]) -> GameResult<'a> {
  flatbuffers::get_size_prefixed_root::<GameResult<'a>>(buf)
}

#[inline]
pub fn finish_game_result_buffer<'a, 'b>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>,
    root: flatbuffers::WIPOffset<GameResult<'a>>) {
  fbb.finish(root, None);
}

#[inline]
pub fn finish_size_prefixed_game_result_buffer<'a, 'b>(fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>, root: flatbuffers::WIPOffset<GameResult<'a>>) {
  fbb.finish_size_prefixed(root, None);
}
