// automatically generated by the FlatBuffers compiler, do not modify



use crate::AskForPlayer_generated::*;
use crate::GameData_generated::*;
use crate::GameResult_generated::*;
use crate::Message_generated::*;
use crate::OnlinePlayers_generated::*;
use crate::Player_generated::*;
use crate::ReceivePlayer_generated::*;
use crate::SendPlayerGameScore_generated::*;
use std::mem;
use std::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::EndianScalar;

#[allow(non_camel_case_types)]
#[repr(u8)]
#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Debug)]
pub enum Data {
  NONE = 0,
  AskForPlayer = 1,
  GameData = 2,
  Message = 3,
  OnlinePlayers = 4,
  ReceivePlayer = 5,
  SendGameScore = 6,

}

pub const ENUM_MIN_DATA: u8 = 0;
pub const ENUM_MAX_DATA: u8 = 6;

impl<'a> flatbuffers::Follow<'a> for Data {
  type Inner = Self;
  #[inline]
  fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    flatbuffers::read_scalar_at::<Self>(buf, loc)
  }
}

impl flatbuffers::EndianScalar for Data {
  #[inline]
  fn to_little_endian(self) -> Self {
    let n = u8::to_le(self as u8);
    let p = &n as *const u8 as *const Data;
    unsafe { *p }
  }
  #[inline]
  fn from_little_endian(self) -> Self {
    let n = u8::from_le(self as u8);
    let p = &n as *const u8 as *const Data;
    unsafe { *p }
  }
}

impl flatbuffers::Push for Data {
    type Output = Data;
    #[inline]
    fn push(&self, dst: &mut [u8], _rest: &[u8]) {
        flatbuffers::emplace_scalar::<Data>(dst, *self);
    }
}

#[allow(non_camel_case_types)]
pub const ENUM_VALUES_DATA:[Data; 7] = [
  Data::NONE,
  Data::AskForPlayer,
  Data::GameData,
  Data::Message,
  Data::OnlinePlayers,
  Data::ReceivePlayer,
  Data::SendGameScore
];

#[allow(non_camel_case_types)]
pub const ENUM_NAMES_DATA:[&'static str; 7] = [
    "NONE",
    "AskForPlayer",
    "GameData",
    "Message",
    "OnlinePlayers",
    "ReceivePlayer",
    "SendGameScore"
];

pub fn enum_name_data(e: Data) -> &'static str {
  let index = e as u8;
  ENUM_NAMES_DATA[index as usize]
}

pub struct DataUnionTableOffset {}
pub enum GenericPacketOffset {}
#[derive(Copy, Clone, Debug, PartialEq)]

pub struct GenericPacket<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for GenericPacket<'a> {
    type Inner = GenericPacket<'a>;
    #[inline]
    fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
        Self {
            _tab: flatbuffers::Table { buf: buf, loc: loc },
        }
    }
}

impl<'a> GenericPacket<'a> {
    #[inline]
    pub fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
        GenericPacket {
            _tab: table,
        }
    }
    #[allow(unused_mut)]
    pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
        _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
        args: &'args GenericPacketArgs) -> flatbuffers::WIPOffset<GenericPacket<'bldr>> {
      let mut builder = GenericPacketBuilder::new(_fbb);
      if let Some(x) = args.data { builder.add_data(x); }
      builder.add_data_type(args.data_type);
      builder.finish()
    }

    pub const VT_DATA_TYPE: flatbuffers::VOffsetT = 4;
    pub const VT_DATA: flatbuffers::VOffsetT = 6;

  #[inline]
  pub fn data_type(&self) -> Data {
    self._tab.get::<Data>(GenericPacket::VT_DATA_TYPE, Some(Data::NONE)).unwrap()
  }
  #[inline]
  pub fn data(&self) -> Option<flatbuffers::Table<'a>> {
    self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Table<'a>>>(GenericPacket::VT_DATA, None)
  }
  #[inline]
  #[allow(non_snake_case)]
  pub fn data_as_ask_for_player(&self) -> Option<AskForPlayer<'a>> {
    if self.data_type() == Data::AskForPlayer {
      self.data().map(|u| AskForPlayer::init_from_table(u))
    } else {
      None
    }
  }

  #[inline]
  #[allow(non_snake_case)]
  pub fn data_as_game_data(&self) -> Option<GameData<'a>> {
    if self.data_type() == Data::GameData {
      self.data().map(|u| GameData::init_from_table(u))
    } else {
      None
    }
  }

  #[inline]
  #[allow(non_snake_case)]
  pub fn data_as_message(&self) -> Option<Message<'a>> {
    if self.data_type() == Data::Message {
      self.data().map(|u| Message::init_from_table(u))
    } else {
      None
    }
  }

  #[inline]
  #[allow(non_snake_case)]
  pub fn data_as_online_players(&self) -> Option<OnlinePlayers<'a>> {
    if self.data_type() == Data::OnlinePlayers {
      self.data().map(|u| OnlinePlayers::init_from_table(u))
    } else {
      None
    }
  }

  #[inline]
  #[allow(non_snake_case)]
  pub fn data_as_receive_player(&self) -> Option<ReceivePlayer<'a>> {
    if self.data_type() == Data::ReceivePlayer {
      self.data().map(|u| ReceivePlayer::init_from_table(u))
    } else {
      None
    }
  }

  #[inline]
  #[allow(non_snake_case)]
  pub fn data_as_send_game_score(&self) -> Option<SendGameScore<'a>> {
    if self.data_type() == Data::SendGameScore {
      self.data().map(|u| SendGameScore::init_from_table(u))
    } else {
      None
    }
  }

}

pub struct GenericPacketArgs {
    pub data_type: Data,
    pub data: Option<flatbuffers::WIPOffset<flatbuffers::UnionWIPOffset>>,
}
impl<'a> Default for GenericPacketArgs {
    #[inline]
    fn default() -> Self {
        GenericPacketArgs {
            data_type: Data::NONE,
            data: None,
        }
    }
}
pub struct GenericPacketBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> GenericPacketBuilder<'a, 'b> {
  #[inline]
  pub fn add_data_type(&mut self, data_type: Data) {
    self.fbb_.push_slot::<Data>(GenericPacket::VT_DATA_TYPE, data_type, Data::NONE);
  }
  #[inline]
  pub fn add_data(&mut self, data: flatbuffers::WIPOffset<flatbuffers::UnionWIPOffset>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(GenericPacket::VT_DATA, data);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> GenericPacketBuilder<'a, 'b> {
    let start = _fbb.start_table();
    GenericPacketBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<GenericPacket<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

#[inline]
pub fn get_root_as_generic_packet<'a>(buf: &'a [u8]) -> GenericPacket<'a> {
  flatbuffers::get_root::<GenericPacket<'a>>(buf)
}

#[inline]
pub fn get_size_prefixed_root_as_generic_packet<'a>(buf: &'a [u8]) -> GenericPacket<'a> {
  flatbuffers::get_size_prefixed_root::<GenericPacket<'a>>(buf)
}

#[inline]
pub fn finish_generic_packet_buffer<'a, 'b>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>,
    root: flatbuffers::WIPOffset<GenericPacket<'a>>) {
  fbb.finish(root, None);
}

#[inline]
pub fn finish_size_prefixed_generic_packet_buffer<'a, 'b>(fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>, root: flatbuffers::WIPOffset<GenericPacket<'a>>) {
  fbb.finish_size_prefixed(root, None);
}
