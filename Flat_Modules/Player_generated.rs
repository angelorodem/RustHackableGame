// automatically generated by the FlatBuffers compiler, do not modify



use std::mem;
use std::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::EndianScalar;

pub enum PlayerOffset {}
#[derive(Copy, Clone, Debug, PartialEq)]

pub struct Player<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for Player<'a> {
    type Inner = Player<'a>;
    #[inline]
    fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
        Self {
            _tab: flatbuffers::Table { buf: buf, loc: loc },
        }
    }
}

impl<'a> Player<'a> {
    #[inline]
    pub fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
        Player {
            _tab: table,
        }
    }
    #[allow(unused_mut)]
    pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
        _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
        args: &'args PlayerArgs<'args>) -> flatbuffers::WIPOffset<Player<'bldr>> {
      let mut builder = PlayerBuilder::new(_fbb);
      if let Some(x) = args.password { builder.add_password(x); }
      if let Some(x) = args.auth_token { builder.add_auth_token(x); }
      if let Some(x) = args.name { builder.add_name(x); }
      builder.add_id(args.id);
      builder.finish()
    }

    pub const VT_ID: flatbuffers::VOffsetT = 4;
    pub const VT_NAME: flatbuffers::VOffsetT = 6;
    pub const VT_AUTH_TOKEN: flatbuffers::VOffsetT = 8;
    pub const VT_PASSWORD: flatbuffers::VOffsetT = 10;

  #[inline]
  pub fn id(&self) -> u32 {
    self._tab.get::<u32>(Player::VT_ID, Some(0)).unwrap()
  }
  #[inline]
  pub fn name(&self) -> &'a str {
    self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Player::VT_NAME, None).unwrap()
  }
  #[inline]
  pub fn auth_token(&self) -> Option<&'a str> {
    self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Player::VT_AUTH_TOKEN, None)
  }
  #[inline]
  pub fn password(&self) -> Option<&'a str> {
    self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Player::VT_PASSWORD, None)
  }
}

pub struct PlayerArgs<'a> {
    pub id: u32,
    pub name: Option<flatbuffers::WIPOffset<&'a  str>>,
    pub auth_token: Option<flatbuffers::WIPOffset<&'a  str>>,
    pub password: Option<flatbuffers::WIPOffset<&'a  str>>,
}
impl<'a> Default for PlayerArgs<'a> {
    #[inline]
    fn default() -> Self {
        PlayerArgs {
            id: 0,
            name: None, // required field
            auth_token: None,
            password: None,
        }
    }
}
pub struct PlayerBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> PlayerBuilder<'a, 'b> {
  #[inline]
  pub fn add_id(&mut self, id: u32) {
    self.fbb_.push_slot::<u32>(Player::VT_ID, id, 0);
  }
  #[inline]
  pub fn add_name(&mut self, name: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Player::VT_NAME, name);
  }
  #[inline]
  pub fn add_auth_token(&mut self, auth_token: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Player::VT_AUTH_TOKEN, auth_token);
  }
  #[inline]
  pub fn add_password(&mut self, password: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Player::VT_PASSWORD, password);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> PlayerBuilder<'a, 'b> {
    let start = _fbb.start_table();
    PlayerBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<Player<'a>> {
    let o = self.fbb_.end_table(self.start_);
    self.fbb_.required(o, Player::VT_NAME,"name");
    flatbuffers::WIPOffset::new(o.value())
  }
}

#[inline]
pub fn get_root_as_player<'a>(buf: &'a [u8]) -> Player<'a> {
  flatbuffers::get_root::<Player<'a>>(buf)
}

#[inline]
pub fn get_size_prefixed_root_as_player<'a>(buf: &'a [u8]) -> Player<'a> {
  flatbuffers::get_size_prefixed_root::<Player<'a>>(buf)
}

#[inline]
pub fn finish_player_buffer<'a, 'b>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>,
    root: flatbuffers::WIPOffset<Player<'a>>) {
  fbb.finish(root, None);
}

#[inline]
pub fn finish_size_prefixed_player_buffer<'a, 'b>(fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>, root: flatbuffers::WIPOffset<Player<'a>>) {
  fbb.finish_size_prefixed(root, None);
}
