// automatically generated by the FlatBuffers compiler, do not modify



use crate::Player_generated::*;
use std::mem;
use std::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::EndianScalar;

pub enum AskForGameDataOffset {}
#[derive(Copy, Clone, Debug, PartialEq)]

pub struct AskForGameData<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for AskForGameData<'a> {
    type Inner = AskForGameData<'a>;
    #[inline]
    fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
        Self {
            _tab: flatbuffers::Table { buf: buf, loc: loc },
        }
    }
}

impl<'a> AskForGameData<'a> {
    #[inline]
    pub fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
        AskForGameData {
            _tab: table,
        }
    }
    #[allow(unused_mut)]
    pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
        _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
        args: &'args AskForGameDataArgs<'args>) -> flatbuffers::WIPOffset<AskForGameData<'bldr>> {
      let mut builder = AskForGameDataBuilder::new(_fbb);
      if let Some(x) = args.player { builder.add_player(x); }
      builder.finish()
    }

    pub const VT_PLAYER: flatbuffers::VOffsetT = 4;

  #[inline]
  pub fn player(&self) -> Option<Player<'a>> {
    self._tab.get::<flatbuffers::ForwardsUOffset<Player<'a>>>(AskForGameData::VT_PLAYER, None)
  }
}

pub struct AskForGameDataArgs<'a> {
    pub player: Option<flatbuffers::WIPOffset<Player<'a >>>,
}
impl<'a> Default for AskForGameDataArgs<'a> {
    #[inline]
    fn default() -> Self {
        AskForGameDataArgs {
            player: None,
        }
    }
}
pub struct AskForGameDataBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> AskForGameDataBuilder<'a, 'b> {
  #[inline]
  pub fn add_player(&mut self, player: flatbuffers::WIPOffset<Player<'b >>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<Player>>(AskForGameData::VT_PLAYER, player);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> AskForGameDataBuilder<'a, 'b> {
    let start = _fbb.start_table();
    AskForGameDataBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<AskForGameData<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

#[inline]
pub fn get_root_as_ask_for_game_data<'a>(buf: &'a [u8]) -> AskForGameData<'a> {
  flatbuffers::get_root::<AskForGameData<'a>>(buf)
}

#[inline]
pub fn get_size_prefixed_root_as_ask_for_game_data<'a>(buf: &'a [u8]) -> AskForGameData<'a> {
  flatbuffers::get_size_prefixed_root::<AskForGameData<'a>>(buf)
}

#[inline]
pub fn finish_ask_for_game_data_buffer<'a, 'b>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>,
    root: flatbuffers::WIPOffset<AskForGameData<'a>>) {
  fbb.finish(root, None);
}

#[inline]
pub fn finish_size_prefixed_ask_for_game_data_buffer<'a, 'b>(fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>, root: flatbuffers::WIPOffset<AskForGameData<'a>>) {
  fbb.finish_size_prefixed(root, None);
}
